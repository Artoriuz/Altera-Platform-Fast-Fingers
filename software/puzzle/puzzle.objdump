
puzzle.elf:     file format elf32-littlenios2
puzzle.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000020c8 memsz 0x000020c8 flags r-x
    LOAD off    0x000030e8 vaddr 0x000060e8 paddr 0x00006768 align 2**12
         filesz 0x00000680 memsz 0x00000680 flags rw-
    LOAD off    0x00003de8 vaddr 0x00006de8 paddr 0x00006de8 align 2**12
         filesz 0x00000000 memsz 0x000001b8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001f30  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  00005f50  00005f50  00002f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000680  000060e8  00006768  000030e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000001b8  00006de8  00006de8  00003de8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000408  00000000  00000000  00003790  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000005e9  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008cb5  00000000  00000000  00004181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001f04  00000000  00000000  0000ce36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004d39  00000000  00000000  0000ed3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006a8  00000000  00000000  00013a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d39  00000000  00000000  0001411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000018e7  00000000  00000000  00014e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0001673c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000280  00000000  00000000  00016750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00018054  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00018057  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00018061  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00018062  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00018063  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00018067  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001806b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0001806f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00018073  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00018077  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0001807b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000016  00000000  00000000  00018080  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00039341  00000000  00000000  00018096  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00005f50 l    d  .rodata	00000000 .rodata
000060e8 l    d  .rwdata	00000000 .rwdata
00006de8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
000060e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00004af8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000064e8 l     O .rwdata	0000002c leds
00006514 l     O .rwdata	0000002c push_buttons
00006540 l     O .rwdata	0000002c seven_segments
0000656c l     O .rwdata	0000002c switcher
00004de0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 alt_close.c
00004f58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004fd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000050b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000558c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005da0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005eec l     F .text	00000040 alt_sim_halt
0000405c g     F .text	00000078 potencia
00004b64 g     F .text	00000050 alt_main
00006768 g       *ABS*	00000000 __flash_rwdata_start
000046c4 g     F .text	00000074 _gettimeofday_r
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006de8 g     O .bss	00000004 errno
00006e00 g     O .bss	00000004 alt_argv
0000e740 g       *ABS*	00000000 _gp
000065c0 g     O .rwdata	00000180 alt_fd_list
000051dc g     F .text	00000094 alt_find_dev
00005f50 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00005edc g     F .text	00000008 __udivsi3
00006dec g     O .bss	00000008 alt_timezone
00006760 g     O .rwdata	00000004 alt_max_fd
00005740 g     F .text	00000660 __umoddi3
00006744 g     O .rwdata	00000004 _global_impure_ptr
00006fa0 g       *ABS*	00000000 __bss_end
00004c4c g     F .text	0000010c alt_tick
00004bb4 g     F .text	00000098 alt_alarm_stop
00006598 g     O .rwdata	00000028 alt_dev_null
00004e18 g     F .text	00000040 alt_up_parallel_port_open_dev
00004fb8 g     F .text	0000001c alt_dcache_flush_all
00006768 g       *ABS*	00000000 __ram_rwdata_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory
00006758 g     O .rwdata	00000008 alt_dev_list
000060e8 g       *ABS*	00000000 __ram_rodata_end
00005ee4 g     F .text	00000008 __umodsi3
00006fa0 g       *ABS*	00000000 end
00005f4c g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005590 g     F .text	000001b0 __call_exitprocs
00004020 g     F .text	0000003c _start
00006e08 g     O .bss	00000004 _alt_tick_rate
000045f0 g     F .text	00000078 rand
00006e0c g     O .bss	00000004 _alt_nticks
00004d8c g     F .text	00000054 alt_sys_init
00005458 g     F .text	00000134 __register_exitproc
0000459c g     F .text	00000038 __mulsi3
000060e8 g       *ABS*	00000000 __ram_rwdata_start
00005f50 g       *ABS*	00000000 __ram_rodata_start
00005370 g     F .text	00000074 memcmp
00006fa0 g       *ABS*	00000000 __alt_stack_base
00005000 g     F .text	000000b4 alt_dev_llist_insert
0000485c g     F .text	0000021c gettimeofday
00006de8 g       *ABS*	00000000 __bss_start
000040d4 g     F .text	000004c8 main
00006e04 g     O .bss	00000004 alt_envp
000045d4 g     F .text	0000001c srand
00006e10 g     O .bss	00000190 _atexit0
00004668 g     F .text	0000005c time
00006764 g     O .rwdata	00000004 alt_errno
00005e1c g     F .text	00000060 __divsi3
00005f50 g       *ABS*	00000000 __CTOR_END__
00005f50 g       *ABS*	00000000 __flash_rodata_start
00005f50 g       *ABS*	00000000 __DTOR_LIST__
00004d58 g     F .text	00000034 alt_irq_init
0000528c g     F .text	00000078 alt_release_fd
00005fe8 g     O .rodata	00000100 __clz_tab
00005324 g     F .text	00000014 atexit
00006740 g     O .rwdata	00000004 _impure_ptr
00006dfc g     O .bss	00000004 alt_argc
00005178 g     F .text	00000064 _do_dtors
00006750 g     O .rwdata	00000008 alt_fs_list
00006df4 g     O .bss	00000008 alt_resettime
00004020 g       *ABS*	00000000 __ram_exceptions_start
00006768 g       *ABS*	00000000 _edata
00006fa0 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00005304 g     F .text	00000020 altera_nios2_qsys_irq_init
00005338 g     F .text	00000038 exit
00005e7c g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00005f2c g     F .text	00000020 _exit
00004738 g     F .text	00000124 __muldi3
000053e4 g     F .text	00000074 strlen
00005270 g     F .text	0000001c alt_icache_flush_all
00006748 g     O .rwdata	00000008 alt_alarm_list
00005114 g     F .text	00000064 _do_ctors
00004e58 g     F .text	00000100 close
00004a78 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b9d014 	ori	gp,gp,59200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	109b7a14 	ori	r2,r2,28136

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18dbe814 	ori	r3,r3,28576

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004a780 	call	4a78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	0004b640 	call	4b64 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <potencia>:
	#define	NUM_D	0x42
	#define	NUM_E	0x30
	#define	NUM_F	0x38


	int potencia(int x, int n) {
    405c:	defffa04 	addi	sp,sp,-24
    4060:	dfc00515 	stw	ra,20(sp)
    4064:	df000415 	stw	fp,16(sp)
    4068:	df000404 	addi	fp,sp,16
    406c:	e13ffe15 	stw	r4,-8(fp)
    4070:	e17fff15 	stw	r5,-4(fp)
		int aux = 1, j;
    4074:	00800044 	movi	r2,1
    4078:	e0bffd15 	stw	r2,-12(fp)
		if (n != 0) {
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	1005003a 	cmpeq	r2,r2,zero
    4084:	10000d1e 	bne	r2,zero,40bc <potencia+0x60>
			for (j=1; j<=n;j++) {
    4088:	00800044 	movi	r2,1
    408c:	e0bffc15 	stw	r2,-16(fp)
    4090:	00000706 	br	40b0 <potencia+0x54>
				aux *= x;
    4094:	e13ffd17 	ldw	r4,-12(fp)
    4098:	e17ffe17 	ldw	r5,-8(fp)
    409c:	000459c0 	call	459c <__mulsi3>
    40a0:	e0bffd15 	stw	r2,-12(fp)


	int potencia(int x, int n) {
		int aux = 1, j;
		if (n != 0) {
			for (j=1; j<=n;j++) {
    40a4:	e0bffc17 	ldw	r2,-16(fp)
    40a8:	10800044 	addi	r2,r2,1
    40ac:	e0bffc15 	stw	r2,-16(fp)
    40b0:	e0fffc17 	ldw	r3,-16(fp)
    40b4:	e0bfff17 	ldw	r2,-4(fp)
    40b8:	10fff60e 	bge	r2,r3,4094 <potencia+0x38>
				aux *= x;
			}
		}
		return aux;
    40bc:	e0bffd17 	ldw	r2,-12(fp)
	}
    40c0:	e037883a 	mov	sp,fp
    40c4:	dfc00117 	ldw	ra,4(sp)
    40c8:	df000017 	ldw	fp,0(sp)
    40cc:	dec00204 	addi	sp,sp,8
    40d0:	f800283a 	ret

000040d4 <main>:

	int main(){
    40d4:	defff204 	addi	sp,sp,-56
    40d8:	dfc00d15 	stw	ra,52(sp)
    40dc:	df000c15 	stw	fp,48(sp)
    40e0:	df000c04 	addi	fp,sp,48
		srand(time(NULL));
    40e4:	0009883a 	mov	r4,zero
    40e8:	00046680 	call	4668 <time>
    40ec:	1009883a 	mov	r4,r2
    40f0:	00045d40 	call	45d4 <srand>

		int i=0, j=0, puzzle=0, input=0, round=0, aux = 0, k=0;
    40f4:	e03ffe15 	stw	zero,-8(fp)
    40f8:	e03ffd15 	stw	zero,-12(fp)
    40fc:	e03ffc15 	stw	zero,-16(fp)
    4100:	e03ffb15 	stw	zero,-20(fp)
    4104:	e03ffa15 	stw	zero,-24(fp)
    4108:	e03ff915 	stw	zero,-28(fp)
    410c:	e03ff815 	stw	zero,-32(fp)
		alt_up_parallel_port_dev *switcher_device;
		alt_up_parallel_port_dev *leds_device;
		alt_up_parallel_port_dev *seven_segments_device;
		alt_up_parallel_port_dev *push_buttons_device;

		switcher_device 		= alt_up_parallel_port_open_dev("/dev/switcher");
    4110:	01000034 	movhi	r4,0
    4114:	2117d404 	addi	r4,r4,24400
    4118:	0004e180 	call	4e18 <alt_up_parallel_port_open_dev>
    411c:	e0bff715 	stw	r2,-36(fp)
		leds_device 			= alt_up_parallel_port_open_dev("/dev/leds");
    4120:	01000034 	movhi	r4,0
    4124:	2117d804 	addi	r4,r4,24416
    4128:	0004e180 	call	4e18 <alt_up_parallel_port_open_dev>
    412c:	e0bff615 	stw	r2,-40(fp)
		seven_segments_device 	= alt_up_parallel_port_open_dev("/dev/seven_segments");
    4130:	01000034 	movhi	r4,0
    4134:	2117db04 	addi	r4,r4,24428
    4138:	0004e180 	call	4e18 <alt_up_parallel_port_open_dev>
    413c:	e0bff515 	stw	r2,-44(fp)
		push_buttons_device		= alt_up_parallel_port_open_dev("dev/push_buttons");
    4140:	01000034 	movhi	r4,0
    4144:	2117e004 	addi	r4,r4,24448
    4148:	0004e180 	call	4e18 <alt_up_parallel_port_open_dev>
    414c:	e0bff415 	stw	r2,-48(fp)
    4150:	00000006 	br	4154 <main+0x80>

		while(1){
			if (round == 16){
    4154:	e0bffa17 	ldw	r2,-24(fp)
    4158:	10800418 	cmpnei	r2,r2,16
    415c:	10010b1e 	bne	r2,zero,458c <main+0x4b8>
				round = 0;
    4160:	e03ffa15 	stw	zero,-24(fp)
				alt_up_parallel_port_write_data(leds_device,0xff);
    4164:	e0bff617 	ldw	r2,-40(fp)
    4168:	10800a17 	ldw	r2,40(r2)
    416c:	1007883a 	mov	r3,r2
    4170:	00803fc4 	movi	r2,255
    4174:	18800035 	stwio	r2,0(r3)
				k=0;
    4178:	e03ff815 	stw	zero,-32(fp)
				while (k<4) {
    417c:	00003806 	br	4260 <main+0x18c>
					for (j=0; j<8; j++) {
    4180:	e03ffd15 	stw	zero,-12(fp)
    4184:	00001506 	br	41dc <main+0x108>
						aux = potencia(2,j);
    4188:	01000084 	movi	r4,2
    418c:	e17ffd17 	ldw	r5,-12(fp)
    4190:	000405c0 	call	405c <potencia>
    4194:	e0bff915 	stw	r2,-28(fp)
						alt_up_parallel_port_write_data(leds_device,aux);
    4198:	e0bff617 	ldw	r2,-40(fp)
    419c:	10800a17 	ldw	r2,40(r2)
    41a0:	1007883a 	mov	r3,r2
    41a4:	e0bff917 	ldw	r2,-28(fp)
    41a8:	18800035 	stwio	r2,0(r3)
						for(i=0; i<100000; i++){} //delay
    41ac:	e03ffe15 	stw	zero,-8(fp)
    41b0:	00000306 	br	41c0 <main+0xec>
    41b4:	e0bffe17 	ldw	r2,-8(fp)
    41b8:	10800044 	addi	r2,r2,1
    41bc:	e0bffe15 	stw	r2,-8(fp)
    41c0:	e0fffe17 	ldw	r3,-8(fp)
    41c4:	008000b4 	movhi	r2,2
    41c8:	10a1a7c4 	addi	r2,r2,-31073
    41cc:	10fff90e 	bge	r2,r3,41b4 <main+0xe0>
			if (round == 16){
				round = 0;
				alt_up_parallel_port_write_data(leds_device,0xff);
				k=0;
				while (k<4) {
					for (j=0; j<8; j++) {
    41d0:	e0bffd17 	ldw	r2,-12(fp)
    41d4:	10800044 	addi	r2,r2,1
    41d8:	e0bffd15 	stw	r2,-12(fp)
    41dc:	e0bffd17 	ldw	r2,-12(fp)
    41e0:	10800210 	cmplti	r2,r2,8
    41e4:	103fe81e 	bne	r2,zero,4188 <main+0xb4>
						aux = potencia(2,j);
						alt_up_parallel_port_write_data(leds_device,aux);
						for(i=0; i<100000; i++){} //delay
					}
					for (j=7; j>=0; j--) {
    41e8:	008001c4 	movi	r2,7
    41ec:	e0bffd15 	stw	r2,-12(fp)
    41f0:	00001506 	br	4248 <main+0x174>
						aux = potencia(2,j);
    41f4:	01000084 	movi	r4,2
    41f8:	e17ffd17 	ldw	r5,-12(fp)
    41fc:	000405c0 	call	405c <potencia>
    4200:	e0bff915 	stw	r2,-28(fp)
						alt_up_parallel_port_write_data(leds_device,aux);
    4204:	e0bff617 	ldw	r2,-40(fp)
    4208:	10800a17 	ldw	r2,40(r2)
    420c:	1007883a 	mov	r3,r2
    4210:	e0bff917 	ldw	r2,-28(fp)
    4214:	18800035 	stwio	r2,0(r3)
						for(i=0; i<100000; i++){} //delay
    4218:	e03ffe15 	stw	zero,-8(fp)
    421c:	00000306 	br	422c <main+0x158>
    4220:	e0bffe17 	ldw	r2,-8(fp)
    4224:	10800044 	addi	r2,r2,1
    4228:	e0bffe15 	stw	r2,-8(fp)
    422c:	e0fffe17 	ldw	r3,-8(fp)
    4230:	008000b4 	movhi	r2,2
    4234:	10a1a7c4 	addi	r2,r2,-31073
    4238:	10fff90e 	bge	r2,r3,4220 <main+0x14c>
					for (j=0; j<8; j++) {
						aux = potencia(2,j);
						alt_up_parallel_port_write_data(leds_device,aux);
						for(i=0; i<100000; i++){} //delay
					}
					for (j=7; j>=0; j--) {
    423c:	e0bffd17 	ldw	r2,-12(fp)
    4240:	10bfffc4 	addi	r2,r2,-1
    4244:	e0bffd15 	stw	r2,-12(fp)
    4248:	e0bffd17 	ldw	r2,-12(fp)
    424c:	1004403a 	cmpge	r2,r2,zero
    4250:	103fe81e 	bne	r2,zero,41f4 <main+0x120>
						aux = potencia(2,j);
						alt_up_parallel_port_write_data(leds_device,aux);
						for(i=0; i<100000; i++){} //delay
					}
				k++;
    4254:	e0bff817 	ldw	r2,-32(fp)
    4258:	10800044 	addi	r2,r2,1
    425c:	e0bff815 	stw	r2,-32(fp)
		while(1){
			if (round == 16){
				round = 0;
				alt_up_parallel_port_write_data(leds_device,0xff);
				k=0;
				while (k<4) {
    4260:	e0bff817 	ldw	r2,-32(fp)
    4264:	10800110 	cmplti	r2,r2,4
    4268:	103fc51e 	bne	r2,zero,4180 <main+0xac>
    426c:	003fb906 	br	4154 <main+0x80>
					}
				k++;
				}
			} else {
				while (round < 16){
					switch(round){
    4270:	e0bffa17 	ldw	r2,-24(fp)
    4274:	10800428 	cmpgeui	r2,r2,16
    4278:	1000761e 	bne	r2,zero,4454 <main+0x380>
    427c:	e0bffa17 	ldw	r2,-24(fp)
    4280:	1085883a 	add	r2,r2,r2
    4284:	1087883a 	add	r3,r2,r2
    4288:	00800034 	movhi	r2,0
    428c:	1090a704 	addi	r2,r2,17052
    4290:	1885883a 	add	r2,r3,r2
    4294:	10800017 	ldw	r2,0(r2)
    4298:	1000683a 	jmp	r2
    429c:	000042dc 	xori	zero,zero,267
    42a0:	000042f4 	movhi	zero,267
    42a4:	0000430c 	andi	zero,zero,268
    42a8:	00004324 	muli	zero,zero,268
    42ac:	0000433c 	xorhi	zero,zero,268
    42b0:	00004354 	movui	zero,269
    42b4:	0000436c 	andhi	zero,zero,269
    42b8:	00004384 	movi	zero,270
    42bc:	0000439c 	xori	zero,zero,270
    42c0:	000043ac 	andhi	zero,zero,270
    42c4:	000043c4 	movi	zero,271
    42c8:	000043dc 	xori	zero,zero,271
    42cc:	000043f4 	movhi	zero,271
    42d0:	0000440c 	andi	zero,zero,272
    42d4:	00004424 	muli	zero,zero,272
    42d8:	0000443c 	xorhi	zero,zero,272
						case 0x0:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_0); break;	//Escreve no display 7-segmentos o  valor correspondente em hexadecimal
    42dc:	e0bff517 	ldw	r2,-44(fp)
    42e0:	10800a17 	ldw	r2,40(r2)
    42e4:	1007883a 	mov	r3,r2
    42e8:	00800044 	movi	r2,1
    42ec:	18800035 	stwio	r2,0(r3)
    42f0:	00005d06 	br	4468 <main+0x394>
						case 0x1:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_1); break;
    42f4:	e0bff517 	ldw	r2,-44(fp)
    42f8:	10800a17 	ldw	r2,40(r2)
    42fc:	1007883a 	mov	r3,r2
    4300:	008013c4 	movi	r2,79
    4304:	18800035 	stwio	r2,0(r3)
    4308:	00005706 	br	4468 <main+0x394>
						case 0x2:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_2); break;
    430c:	e0bff517 	ldw	r2,-44(fp)
    4310:	10800a17 	ldw	r2,40(r2)
    4314:	1007883a 	mov	r3,r2
    4318:	00800484 	movi	r2,18
    431c:	18800035 	stwio	r2,0(r3)
    4320:	00005106 	br	4468 <main+0x394>
						case 0x3:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_3); break;
    4324:	e0bff517 	ldw	r2,-44(fp)
    4328:	10800a17 	ldw	r2,40(r2)
    432c:	1007883a 	mov	r3,r2
    4330:	00800184 	movi	r2,6
    4334:	18800035 	stwio	r2,0(r3)
    4338:	00004b06 	br	4468 <main+0x394>
						case 0x4:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_4); break;
    433c:	e0bff517 	ldw	r2,-44(fp)
    4340:	10800a17 	ldw	r2,40(r2)
    4344:	1007883a 	mov	r3,r2
    4348:	00801304 	movi	r2,76
    434c:	18800035 	stwio	r2,0(r3)
    4350:	00004506 	br	4468 <main+0x394>
						case 0x5:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_5); break;
    4354:	e0bff517 	ldw	r2,-44(fp)
    4358:	10800a17 	ldw	r2,40(r2)
    435c:	1007883a 	mov	r3,r2
    4360:	00800904 	movi	r2,36
    4364:	18800035 	stwio	r2,0(r3)
    4368:	00003f06 	br	4468 <main+0x394>
						case 0x6:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_6); break;
    436c:	e0bff517 	ldw	r2,-44(fp)
    4370:	10800a17 	ldw	r2,40(r2)
    4374:	1007883a 	mov	r3,r2
    4378:	00800804 	movi	r2,32
    437c:	18800035 	stwio	r2,0(r3)
    4380:	00003906 	br	4468 <main+0x394>
						case 0x7:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_7); break;
    4384:	e0bff517 	ldw	r2,-44(fp)
    4388:	10800a17 	ldw	r2,40(r2)
    438c:	1007883a 	mov	r3,r2
    4390:	008003c4 	movi	r2,15
    4394:	18800035 	stwio	r2,0(r3)
    4398:	00003306 	br	4468 <main+0x394>
						case 0x8:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_8); break;
    439c:	e0bff517 	ldw	r2,-44(fp)
    43a0:	10800a17 	ldw	r2,40(r2)
    43a4:	10000035 	stwio	zero,0(r2)
    43a8:	00002f06 	br	4468 <main+0x394>
						case 0x9:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_9); break;
    43ac:	e0bff517 	ldw	r2,-44(fp)
    43b0:	10800a17 	ldw	r2,40(r2)
    43b4:	1007883a 	mov	r3,r2
    43b8:	00800104 	movi	r2,4
    43bc:	18800035 	stwio	r2,0(r3)
    43c0:	00002906 	br	4468 <main+0x394>
						case 0xA:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_A); break;
    43c4:	e0bff517 	ldw	r2,-44(fp)
    43c8:	10800a17 	ldw	r2,40(r2)
    43cc:	1007883a 	mov	r3,r2
    43d0:	00800204 	movi	r2,8
    43d4:	18800035 	stwio	r2,0(r3)
    43d8:	00002306 	br	4468 <main+0x394>
						case 0xB:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_B); break;
    43dc:	e0bff517 	ldw	r2,-44(fp)
    43e0:	10800a17 	ldw	r2,40(r2)
    43e4:	1007883a 	mov	r3,r2
    43e8:	00801804 	movi	r2,96
    43ec:	18800035 	stwio	r2,0(r3)
    43f0:	00001d06 	br	4468 <main+0x394>
						case 0xC:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_C); break;
    43f4:	e0bff517 	ldw	r2,-44(fp)
    43f8:	10800a17 	ldw	r2,40(r2)
    43fc:	1007883a 	mov	r3,r2
    4400:	00800c44 	movi	r2,49
    4404:	18800035 	stwio	r2,0(r3)
    4408:	00001706 	br	4468 <main+0x394>
						case 0xD:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_D); break;
    440c:	e0bff517 	ldw	r2,-44(fp)
    4410:	10800a17 	ldw	r2,40(r2)
    4414:	1007883a 	mov	r3,r2
    4418:	00801084 	movi	r2,66
    441c:	18800035 	stwio	r2,0(r3)
    4420:	00001106 	br	4468 <main+0x394>
						case 0xE:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_E); break;
    4424:	e0bff517 	ldw	r2,-44(fp)
    4428:	10800a17 	ldw	r2,40(r2)
    442c:	1007883a 	mov	r3,r2
    4430:	00800c04 	movi	r2,48
    4434:	18800035 	stwio	r2,0(r3)
    4438:	00000b06 	br	4468 <main+0x394>
						case 0xF:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_F); break;
    443c:	e0bff517 	ldw	r2,-44(fp)
    4440:	10800a17 	ldw	r2,40(r2)
    4444:	1007883a 	mov	r3,r2
    4448:	00800e04 	movi	r2,56
    444c:	18800035 	stwio	r2,0(r3)
    4450:	00000506 	br	4468 <main+0x394>
						default:
							alt_up_parallel_port_write_data(seven_segments_device,NUM_0); break;
    4454:	e0bff517 	ldw	r2,-44(fp)
    4458:	10800a17 	ldw	r2,40(r2)
    445c:	1007883a 	mov	r3,r2
    4460:	00800044 	movi	r2,1
    4464:	18800035 	stwio	r2,0(r3)
					}
					//sinal pra dizer que pode comeÃ§ar aqui
					puzzle = (16+rand())%16; //AINDA PRECISO LIMITAR ISSO ATÃ‰ O NÃšMERO MÃ�XIMO POSSÃ�VEL
    4468:	00045f00 	call	45f0 <rand>
    446c:	10c00404 	addi	r3,r2,16
    4470:	00a00034 	movhi	r2,32768
    4474:	108003c4 	addi	r2,r2,15
    4478:	1886703a 	and	r3,r3,r2
    447c:	e0ffff15 	stw	r3,-4(fp)
    4480:	e0ffff17 	ldw	r3,-4(fp)
    4484:	1804403a 	cmpge	r2,r3,zero
    4488:	10000a1e 	bne	r2,zero,44b4 <main+0x3e0>
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10bfffc4 	addi	r2,r2,-1
    4494:	e0bfff15 	stw	r2,-4(fp)
    4498:	00bffc04 	movi	r2,-16
    449c:	e0ffff17 	ldw	r3,-4(fp)
    44a0:	1886b03a 	or	r3,r3,r2
    44a4:	e0ffff15 	stw	r3,-4(fp)
    44a8:	e0bfff17 	ldw	r2,-4(fp)
    44ac:	10800044 	addi	r2,r2,1
    44b0:	e0bfff15 	stw	r2,-4(fp)
    44b4:	e0ffff17 	ldw	r3,-4(fp)
    44b8:	e0fffc15 	stw	r3,-16(fp)
					alt_up_parallel_port_write_data(leds_device,puzzle);
    44bc:	e0bff617 	ldw	r2,-40(fp)
    44c0:	10800a17 	ldw	r2,40(r2)
    44c4:	1007883a 	mov	r3,r2
    44c8:	e0bffc17 	ldw	r2,-16(fp)
    44cc:	18800035 	stwio	r2,0(r3)
					for (i=0; i<1500000; i++){}
    44d0:	e03ffe15 	stw	zero,-8(fp)
    44d4:	00000306 	br	44e4 <main+0x410>
    44d8:	e0bffe17 	ldw	r2,-8(fp)
    44dc:	10800044 	addi	r2,r2,1
    44e0:	e0bffe15 	stw	r2,-8(fp)
    44e4:	e0fffe17 	ldw	r3,-8(fp)
    44e8:	008005f4 	movhi	r2,23
    44ec:	10b8d7c4 	addi	r2,r2,-7329
    44f0:	10fff90e 	bge	r2,r3,44d8 <main+0x404>
					alt_up_parallel_port_write_data(leds_device,0x00);
    44f4:	e0bff617 	ldw	r2,-40(fp)
    44f8:	10800a17 	ldw	r2,40(r2)
    44fc:	10000035 	stwio	zero,0(r2)
					input = alt_up_parallel_port_read_data(switcher_device);
    4500:	e0bff717 	ldw	r2,-36(fp)
    4504:	10800a17 	ldw	r2,40(r2)
    4508:	10800037 	ldwio	r2,0(r2)
    450c:	e0bffb15 	stw	r2,-20(fp)
					if(input == puzzle){
    4510:	e0fffb17 	ldw	r3,-20(fp)
    4514:	e0bffc17 	ldw	r2,-16(fp)
    4518:	18800d1e 	bne	r3,r2,4550 <main+0x47c>
						round++;
    451c:	e0bffa17 	ldw	r2,-24(fp)
    4520:	10800044 	addi	r2,r2,1
    4524:	e0bffa15 	stw	r2,-24(fp)
						for(i=0; i<500000; i++){} //delay
    4528:	e03ffe15 	stw	zero,-8(fp)
    452c:	00000306 	br	453c <main+0x468>
    4530:	e0bffe17 	ldw	r2,-8(fp)
    4534:	10800044 	addi	r2,r2,1
    4538:	e0bffe15 	stw	r2,-8(fp)
    453c:	e0fffe17 	ldw	r3,-8(fp)
    4540:	00800234 	movhi	r2,8
    4544:	10a847c4 	addi	r2,r2,-24289
    4548:	10fff90e 	bge	r2,r3,4530 <main+0x45c>
    454c:	00000f06 	br	458c <main+0x4b8>
					} else {
						round = 0;
    4550:	e03ffa15 	stw	zero,-24(fp)
						alt_up_parallel_port_write_data(leds_device,0xff);
    4554:	e0bff617 	ldw	r2,-40(fp)
    4558:	10800a17 	ldw	r2,40(r2)
    455c:	1007883a 	mov	r3,r2
    4560:	00803fc4 	movi	r2,255
    4564:	18800035 	stwio	r2,0(r3)
						for(i=0; i<500000; i++){} //delay
    4568:	e03ffe15 	stw	zero,-8(fp)
    456c:	00000306 	br	457c <main+0x4a8>
    4570:	e0bffe17 	ldw	r2,-8(fp)
    4574:	10800044 	addi	r2,r2,1
    4578:	e0bffe15 	stw	r2,-8(fp)
    457c:	e0fffe17 	ldw	r3,-8(fp)
    4580:	00800234 	movhi	r2,8
    4584:	10a847c4 	addi	r2,r2,-24289
    4588:	10fff90e 	bge	r2,r3,4570 <main+0x49c>
						for(i=0; i<100000; i++){} //delay
					}
				k++;
				}
			} else {
				while (round < 16){
    458c:	e0bffa17 	ldw	r2,-24(fp)
    4590:	10800410 	cmplti	r2,r2,16
    4594:	103f361e 	bne	r2,zero,4270 <main+0x19c>
						alt_up_parallel_port_write_data(leds_device,0xff);
						for(i=0; i<500000; i++){} //delay
					}
				}
			}
		}
    4598:	003eee06 	br	4154 <main+0x80>

0000459c <__mulsi3>:
    459c:	20000a26 	beq	r4,zero,45c8 <__mulsi3+0x2c>
    45a0:	0007883a 	mov	r3,zero
    45a4:	2080004c 	andi	r2,r4,1
    45a8:	1005003a 	cmpeq	r2,r2,zero
    45ac:	2008d07a 	srli	r4,r4,1
    45b0:	1000011e 	bne	r2,zero,45b8 <__mulsi3+0x1c>
    45b4:	1947883a 	add	r3,r3,r5
    45b8:	294b883a 	add	r5,r5,r5
    45bc:	203ff91e 	bne	r4,zero,45a4 <__mulsi3+0x8>
    45c0:	1805883a 	mov	r2,r3
    45c4:	f800283a 	ret
    45c8:	0007883a 	mov	r3,zero
    45cc:	1805883a 	mov	r2,r3
    45d0:	f800283a 	ret

000045d4 <srand>:
    45d4:	00800034 	movhi	r2,0
    45d8:	1099d004 	addi	r2,r2,26432
    45dc:	11400017 	ldw	r5,0(r2)
    45e0:	0007883a 	mov	r3,zero
    45e4:	28c02a15 	stw	r3,168(r5)
    45e8:	29002915 	stw	r4,164(r5)
    45ec:	f800283a 	ret

000045f0 <rand>:
    45f0:	defffe04 	addi	sp,sp,-8
    45f4:	00800034 	movhi	r2,0
    45f8:	1099d004 	addi	r2,r2,26432
    45fc:	dc000015 	stw	r16,0(sp)
    4600:	14000017 	ldw	r16,0(r2)
    4604:	dfc00115 	stw	ra,4(sp)
    4608:	00932574 	movhi	r2,19605
    460c:	109fcb44 	addi	r2,r2,32557
    4610:	82002917 	ldw	r8,164(r16)
    4614:	82402a17 	ldw	r9,168(r16)
    4618:	00d614b4 	movhi	r3,22610
    461c:	18fd0b44 	addi	r3,r3,-3027
    4620:	4009883a 	mov	r4,r8
    4624:	180f883a 	mov	r7,r3
    4628:	100d883a 	mov	r6,r2
    462c:	480b883a 	mov	r5,r9
    4630:	00047380 	call	4738 <__muldi3>
    4634:	02000044 	movi	r8,1
    4638:	1209883a 	add	r4,r2,r8
    463c:	2095803a 	cmpltu	r10,r4,r2
    4640:	50d5883a 	add	r10,r10,r3
    4644:	81002915 	stw	r4,164(r16)
    4648:	01200034 	movhi	r4,32768
    464c:	213fffc4 	addi	r4,r4,-1
    4650:	2284703a 	and	r2,r4,r10
    4654:	82802a15 	stw	r10,168(r16)
    4658:	dfc00117 	ldw	ra,4(sp)
    465c:	dc000017 	ldw	r16,0(sp)
    4660:	dec00204 	addi	sp,sp,8
    4664:	f800283a 	ret

00004668 <time>:
    4668:	defffc04 	addi	sp,sp,-16
    466c:	00800034 	movhi	r2,0
    4670:	1099d004 	addi	r2,r2,26432
    4674:	dc000215 	stw	r16,8(sp)
    4678:	2021883a 	mov	r16,r4
    467c:	11000017 	ldw	r4,0(r2)
    4680:	d80b883a 	mov	r5,sp
    4684:	000d883a 	mov	r6,zero
    4688:	dfc00315 	stw	ra,12(sp)
    468c:	00046c40 	call	46c4 <_gettimeofday_r>
    4690:	00ffffc4 	movi	r3,-1
    4694:	10000416 	blt	r2,zero,46a8 <time+0x40>
    4698:	80000826 	beq	r16,zero,46bc <time+0x54>
    469c:	d8800017 	ldw	r2,0(sp)
    46a0:	80800015 	stw	r2,0(r16)
    46a4:	1007883a 	mov	r3,r2
    46a8:	1805883a 	mov	r2,r3
    46ac:	dfc00317 	ldw	ra,12(sp)
    46b0:	dc000217 	ldw	r16,8(sp)
    46b4:	dec00404 	addi	sp,sp,16
    46b8:	f800283a 	ret
    46bc:	d8800017 	ldw	r2,0(sp)
    46c0:	003ff806 	br	46a4 <time+0x3c>

000046c4 <_gettimeofday_r>:
    46c4:	defffd04 	addi	sp,sp,-12
    46c8:	dc000015 	stw	r16,0(sp)
    46cc:	04000034 	movhi	r16,0
    46d0:	841b7a04 	addi	r16,r16,28136
    46d4:	dc400115 	stw	r17,4(sp)
    46d8:	80000015 	stw	zero,0(r16)
    46dc:	2023883a 	mov	r17,r4
    46e0:	2809883a 	mov	r4,r5
    46e4:	300b883a 	mov	r5,r6
    46e8:	dfc00215 	stw	ra,8(sp)
    46ec:	000485c0 	call	485c <gettimeofday>
    46f0:	1007883a 	mov	r3,r2
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	18800626 	beq	r3,r2,4714 <_gettimeofday_r+0x50>
    46fc:	1805883a 	mov	r2,r3
    4700:	dfc00217 	ldw	ra,8(sp)
    4704:	dc400117 	ldw	r17,4(sp)
    4708:	dc000017 	ldw	r16,0(sp)
    470c:	dec00304 	addi	sp,sp,12
    4710:	f800283a 	ret
    4714:	80800017 	ldw	r2,0(r16)
    4718:	103ff826 	beq	r2,zero,46fc <_gettimeofday_r+0x38>
    471c:	88800015 	stw	r2,0(r17)
    4720:	1805883a 	mov	r2,r3
    4724:	dfc00217 	ldw	ra,8(sp)
    4728:	dc400117 	ldw	r17,4(sp)
    472c:	dc000017 	ldw	r16,0(sp)
    4730:	dec00304 	addi	sp,sp,12
    4734:	f800283a 	ret

00004738 <__muldi3>:
    4738:	defff204 	addi	sp,sp,-56
    473c:	df000c15 	stw	fp,48(sp)
    4740:	3038d43a 	srli	fp,r6,16
    4744:	dd000815 	stw	r20,32(sp)
    4748:	dc400515 	stw	r17,20(sp)
    474c:	2028d43a 	srli	r20,r4,16
    4750:	247fffcc 	andi	r17,r4,65535
    4754:	dc000415 	stw	r16,16(sp)
    4758:	343fffcc 	andi	r16,r6,65535
    475c:	dcc00715 	stw	r19,28(sp)
    4760:	d9000015 	stw	r4,0(sp)
    4764:	2827883a 	mov	r19,r5
    4768:	8809883a 	mov	r4,r17
    476c:	d9400115 	stw	r5,4(sp)
    4770:	800b883a 	mov	r5,r16
    4774:	d9800215 	stw	r6,8(sp)
    4778:	dfc00d15 	stw	ra,52(sp)
    477c:	d9c00315 	stw	r7,12(sp)
    4780:	dd800a15 	stw	r22,40(sp)
    4784:	dd400915 	stw	r21,36(sp)
    4788:	302d883a 	mov	r22,r6
    478c:	ddc00b15 	stw	r23,44(sp)
    4790:	dc800615 	stw	r18,24(sp)
    4794:	000459c0 	call	459c <__mulsi3>
    4798:	8809883a 	mov	r4,r17
    479c:	e00b883a 	mov	r5,fp
    47a0:	102b883a 	mov	r21,r2
    47a4:	000459c0 	call	459c <__mulsi3>
    47a8:	800b883a 	mov	r5,r16
    47ac:	a009883a 	mov	r4,r20
    47b0:	1023883a 	mov	r17,r2
    47b4:	000459c0 	call	459c <__mulsi3>
    47b8:	a009883a 	mov	r4,r20
    47bc:	e00b883a 	mov	r5,fp
    47c0:	1021883a 	mov	r16,r2
    47c4:	000459c0 	call	459c <__mulsi3>
    47c8:	a8ffffcc 	andi	r3,r21,65535
    47cc:	a82ad43a 	srli	r21,r21,16
    47d0:	8c23883a 	add	r17,r17,r16
    47d4:	1011883a 	mov	r8,r2
    47d8:	ac6b883a 	add	r21,r21,r17
    47dc:	a804943a 	slli	r2,r21,16
    47e0:	b009883a 	mov	r4,r22
    47e4:	980b883a 	mov	r5,r19
    47e8:	10c7883a 	add	r3,r2,r3
    47ec:	a812d43a 	srli	r9,r21,16
    47f0:	180d883a 	mov	r6,r3
    47f4:	ac00022e 	bgeu	r21,r16,4800 <__muldi3+0xc8>
    47f8:	00800074 	movhi	r2,1
    47fc:	4091883a 	add	r8,r8,r2
    4800:	4267883a 	add	r19,r8,r9
    4804:	302d883a 	mov	r22,r6
    4808:	000459c0 	call	459c <__mulsi3>
    480c:	d9400317 	ldw	r5,12(sp)
    4810:	d9000017 	ldw	r4,0(sp)
    4814:	1023883a 	mov	r17,r2
    4818:	000459c0 	call	459c <__mulsi3>
    481c:	14cb883a 	add	r5,r2,r19
    4820:	894b883a 	add	r5,r17,r5
    4824:	b005883a 	mov	r2,r22
    4828:	2807883a 	mov	r3,r5
    482c:	dfc00d17 	ldw	ra,52(sp)
    4830:	df000c17 	ldw	fp,48(sp)
    4834:	ddc00b17 	ldw	r23,44(sp)
    4838:	dd800a17 	ldw	r22,40(sp)
    483c:	dd400917 	ldw	r21,36(sp)
    4840:	dd000817 	ldw	r20,32(sp)
    4844:	dcc00717 	ldw	r19,28(sp)
    4848:	dc800617 	ldw	r18,24(sp)
    484c:	dc400517 	ldw	r17,20(sp)
    4850:	dc000417 	ldw	r16,16(sp)
    4854:	dec00e04 	addi	sp,sp,56
    4858:	f800283a 	ret

0000485c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    485c:	defff504 	addi	sp,sp,-44
    4860:	dfc00a15 	stw	ra,40(sp)
    4864:	df000915 	stw	fp,36(sp)
    4868:	dc800815 	stw	r18,32(sp)
    486c:	dc400715 	stw	r17,28(sp)
    4870:	dc000615 	stw	r16,24(sp)
    4874:	df000604 	addi	fp,sp,24
    4878:	e13ffd15 	stw	r4,-12(fp)
    487c:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    4880:	e0bffe17 	ldw	r2,-8(fp)
    4884:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4888:	00800034 	movhi	r2,0
    488c:	109b8304 	addi	r2,r2,28172
    4890:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    4894:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4898:	00800034 	movhi	r2,0
    489c:	109b8204 	addi	r2,r2,28168
    48a0:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
    48a4:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    48a8:	e0bffa17 	ldw	r2,-24(fp)
    48ac:	1005003a 	cmpeq	r2,r2,zero
    48b0:	1000661e 	bne	r2,zero,4a4c <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    48b4:	d0a1ad17 	ldw	r2,-31052(gp)
    48b8:	1021883a 	mov	r16,r2
    48bc:	e13ffb17 	ldw	r4,-20(fp)
    48c0:	e17ffa17 	ldw	r5,-24(fp)
    48c4:	0005edc0 	call	5edc <__udivsi3>
    48c8:	8085883a 	add	r2,r16,r2
    48cc:	1007883a 	mov	r3,r2
    48d0:	e0bffd17 	ldw	r2,-12(fp)
    48d4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    48d8:	00800034 	movhi	r2,0
    48dc:	109b7e04 	addi	r2,r2,28152
    48e0:	10800017 	ldw	r2,0(r2)
    48e4:	1025883a 	mov	r18,r2
    48e8:	e43ffb17 	ldw	r16,-20(fp)
    48ec:	0023883a 	mov	r17,zero
    48f0:	010003f4 	movhi	r4,15
    48f4:	21109004 	addi	r4,r4,16960
    48f8:	e17ffa17 	ldw	r5,-24(fp)
    48fc:	0005edc0 	call	5edc <__udivsi3>
    4900:	1009883a 	mov	r4,r2
    4904:	2005883a 	mov	r2,r4
    4908:	0007883a 	mov	r3,zero
    490c:	8009883a 	mov	r4,r16
    4910:	880b883a 	mov	r5,r17
    4914:	100d883a 	mov	r6,r2
    4918:	180f883a 	mov	r7,r3
    491c:	00047380 	call	4738 <__muldi3>
    4920:	1009883a 	mov	r4,r2
    4924:	180b883a 	mov	r5,r3
    4928:	2005883a 	mov	r2,r4
    492c:	2807883a 	mov	r3,r5
    4930:	1009883a 	mov	r4,r2
    4934:	180b883a 	mov	r5,r3
    4938:	018003f4 	movhi	r6,15
    493c:	31909004 	addi	r6,r6,16960
    4940:	000f883a 	mov	r7,zero
    4944:	00057400 	call	5740 <__umoddi3>
    4948:	1009883a 	mov	r4,r2
    494c:	180b883a 	mov	r5,r3
    4950:	2005883a 	mov	r2,r4
    4954:	2807883a 	mov	r3,r5
    4958:	9085883a 	add	r2,r18,r2
    495c:	1007883a 	mov	r3,r2
    4960:	e0bffd17 	ldw	r2,-12(fp)
    4964:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    4968:	00001506 	br	49c0 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
    496c:	e0bffd17 	ldw	r2,-12(fp)
    4970:	10800017 	ldw	r2,0(r2)
    4974:	10800048 	cmpgei	r2,r2,1
    4978:	1000051e 	bne	r2,zero,4990 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
    497c:	e0bffd17 	ldw	r2,-12(fp)
    4980:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    4984:	e0bffd17 	ldw	r2,-12(fp)
    4988:	10000115 	stw	zero,4(r2)
          break;
    498c:	00001d06 	br	4a04 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
    4990:	e0bffd17 	ldw	r2,-12(fp)
    4994:	10800017 	ldw	r2,0(r2)
    4998:	10ffffc4 	addi	r3,r2,-1
    499c:	e0bffd17 	ldw	r2,-12(fp)
    49a0:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    49a4:	e0bffd17 	ldw	r2,-12(fp)
    49a8:	10c00117 	ldw	r3,4(r2)
    49ac:	008003f4 	movhi	r2,15
    49b0:	10909004 	addi	r2,r2,16960
    49b4:	1887883a 	add	r3,r3,r2
    49b8:	e0bffd17 	ldw	r2,-12(fp)
    49bc:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    49c0:	e0bffd17 	ldw	r2,-12(fp)
    49c4:	10800117 	ldw	r2,4(r2)
    49c8:	1004803a 	cmplt	r2,r2,zero
    49cc:	103fe71e 	bne	r2,zero,496c <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    49d0:	00000c06 	br	4a04 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
    49d4:	e0bffd17 	ldw	r2,-12(fp)
    49d8:	10800017 	ldw	r2,0(r2)
    49dc:	10c00044 	addi	r3,r2,1
    49e0:	e0bffd17 	ldw	r2,-12(fp)
    49e4:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    49e8:	e0bffd17 	ldw	r2,-12(fp)
    49ec:	10c00117 	ldw	r3,4(r2)
    49f0:	00bffc74 	movhi	r2,65521
    49f4:	10af7004 	addi	r2,r2,-16960
    49f8:	1887883a 	add	r3,r3,r2
    49fc:	e0bffd17 	ldw	r2,-12(fp)
    4a00:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    4a04:	e0bffd17 	ldw	r2,-12(fp)
    4a08:	10c00117 	ldw	r3,4(r2)
    4a0c:	008003f4 	movhi	r2,15
    4a10:	10908fc4 	addi	r2,r2,16959
    4a14:	10ffef16 	blt	r2,r3,49d4 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    4a18:	e0bffc17 	ldw	r2,-16(fp)
    4a1c:	1005003a 	cmpeq	r2,r2,zero
    4a20:	1000081e 	bne	r2,zero,4a44 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    4a24:	d0e1ab17 	ldw	r3,-31060(gp)
    4a28:	e0bffc17 	ldw	r2,-16(fp)
    4a2c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    4a30:	00800034 	movhi	r2,0
    4a34:	109b7c04 	addi	r2,r2,28144
    4a38:	10c00017 	ldw	r3,0(r2)
    4a3c:	e0bffc17 	ldw	r2,-16(fp)
    4a40:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    4a44:	e03fff15 	stw	zero,-4(fp)
    4a48:	00000206 	br	4a54 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
    4a4c:	00bfde84 	movi	r2,-134
    4a50:	e0bfff15 	stw	r2,-4(fp)
    4a54:	e0bfff17 	ldw	r2,-4(fp)
}
    4a58:	e037883a 	mov	sp,fp
    4a5c:	dfc00417 	ldw	ra,16(sp)
    4a60:	df000317 	ldw	fp,12(sp)
    4a64:	dc800217 	ldw	r18,8(sp)
    4a68:	dc400117 	ldw	r17,4(sp)
    4a6c:	dc000017 	ldw	r16,0(sp)
    4a70:	dec00504 	addi	sp,sp,20
    4a74:	f800283a 	ret

00004a78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4a78:	defffe04 	addi	sp,sp,-8
    4a7c:	dfc00115 	stw	ra,4(sp)
    4a80:	df000015 	stw	fp,0(sp)
    4a84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4a88:	01000034 	movhi	r4,0
    4a8c:	2119da04 	addi	r4,r4,26472
    4a90:	01400034 	movhi	r5,0
    4a94:	29583a04 	addi	r5,r5,24808
    4a98:	01800034 	movhi	r6,0
    4a9c:	3199da04 	addi	r6,r6,26472
    4aa0:	0004af80 	call	4af8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4aa4:	01000034 	movhi	r4,0
    4aa8:	21100804 	addi	r4,r4,16416
    4aac:	01400034 	movhi	r5,0
    4ab0:	29500804 	addi	r5,r5,16416
    4ab4:	01800034 	movhi	r6,0
    4ab8:	31900804 	addi	r6,r6,16416
    4abc:	0004af80 	call	4af8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4ac0:	01000034 	movhi	r4,0
    4ac4:	2117d404 	addi	r4,r4,24400
    4ac8:	01400034 	movhi	r5,0
    4acc:	2957d404 	addi	r5,r5,24400
    4ad0:	01800034 	movhi	r6,0
    4ad4:	31983a04 	addi	r6,r6,24808
    4ad8:	0004af80 	call	4af8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4adc:	0004fb80 	call	4fb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4ae0:	00052700 	call	5270 <alt_icache_flush_all>
}
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	dfc00117 	ldw	ra,4(sp)
    4aec:	df000017 	ldw	fp,0(sp)
    4af0:	dec00204 	addi	sp,sp,8
    4af4:	f800283a 	ret

00004af8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4af8:	defffc04 	addi	sp,sp,-16
    4afc:	df000315 	stw	fp,12(sp)
    4b00:	df000304 	addi	fp,sp,12
    4b04:	e13ffd15 	stw	r4,-12(fp)
    4b08:	e17ffe15 	stw	r5,-8(fp)
    4b0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4b10:	e0fffe17 	ldw	r3,-8(fp)
    4b14:	e0bffd17 	ldw	r2,-12(fp)
    4b18:	18800e26 	beq	r3,r2,4b54 <alt_load_section+0x5c>
  {
    while( to != end )
    4b1c:	00000a06 	br	4b48 <alt_load_section+0x50>
    {
      *to++ = *from++;
    4b20:	e0bffd17 	ldw	r2,-12(fp)
    4b24:	10c00017 	ldw	r3,0(r2)
    4b28:	e0bffe17 	ldw	r2,-8(fp)
    4b2c:	10c00015 	stw	r3,0(r2)
    4b30:	e0bffe17 	ldw	r2,-8(fp)
    4b34:	10800104 	addi	r2,r2,4
    4b38:	e0bffe15 	stw	r2,-8(fp)
    4b3c:	e0bffd17 	ldw	r2,-12(fp)
    4b40:	10800104 	addi	r2,r2,4
    4b44:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4b48:	e0fffe17 	ldw	r3,-8(fp)
    4b4c:	e0bfff17 	ldw	r2,-4(fp)
    4b50:	18bff31e 	bne	r3,r2,4b20 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    4b54:	e037883a 	mov	sp,fp
    4b58:	df000017 	ldw	fp,0(sp)
    4b5c:	dec00104 	addi	sp,sp,4
    4b60:	f800283a 	ret

00004b64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4b64:	defffd04 	addi	sp,sp,-12
    4b68:	dfc00215 	stw	ra,8(sp)
    4b6c:	df000115 	stw	fp,4(sp)
    4b70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4b74:	0009883a 	mov	r4,zero
    4b78:	0004d580 	call	4d58 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4b7c:	0004d8c0 	call	4d8c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4b80:	00051140 	call	5114 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4b84:	01000034 	movhi	r4,0
    4b88:	21145e04 	addi	r4,r4,20856
    4b8c:	00053240 	call	5324 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4b90:	d121af17 	ldw	r4,-31044(gp)
    4b94:	d161b017 	ldw	r5,-31040(gp)
    4b98:	d1a1b117 	ldw	r6,-31036(gp)
    4b9c:	00040d40 	call	40d4 <main>
    4ba0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4ba4:	01000044 	movi	r4,1
    4ba8:	0004e580 	call	4e58 <close>
  exit (result);
    4bac:	e13fff17 	ldw	r4,-4(fp)
    4bb0:	00053380 	call	5338 <exit>

00004bb4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4bb4:	defffa04 	addi	sp,sp,-24
    4bb8:	df000515 	stw	fp,20(sp)
    4bbc:	df000504 	addi	fp,sp,20
    4bc0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4bc4:	0005303a 	rdctl	r2,status
    4bc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4bcc:	e0fffd17 	ldw	r3,-12(fp)
    4bd0:	00bfff84 	movi	r2,-2
    4bd4:	1884703a 	and	r2,r3,r2
    4bd8:	1001703a 	wrctl	status,r2
  
  return context;
    4bdc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4be0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    4be4:	e0bfff17 	ldw	r2,-4(fp)
    4be8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	10c00017 	ldw	r3,0(r2)
    4bf4:	e0bffc17 	ldw	r2,-16(fp)
    4bf8:	10800117 	ldw	r2,4(r2)
    4bfc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    4c00:	e0bffc17 	ldw	r2,-16(fp)
    4c04:	10c00117 	ldw	r3,4(r2)
    4c08:	e0bffc17 	ldw	r2,-16(fp)
    4c0c:	10800017 	ldw	r2,0(r2)
    4c10:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4c14:	e0fffc17 	ldw	r3,-16(fp)
    4c18:	e0bffc17 	ldw	r2,-16(fp)
    4c1c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    4c20:	e0fffc17 	ldw	r3,-16(fp)
    4c24:	e0bffc17 	ldw	r2,-16(fp)
    4c28:	18800015 	stw	r2,0(r3)
    4c2c:	e0bffe17 	ldw	r2,-8(fp)
    4c30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c34:	e0bffb17 	ldw	r2,-20(fp)
    4c38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    4c3c:	e037883a 	mov	sp,fp
    4c40:	df000017 	ldw	fp,0(sp)
    4c44:	dec00104 	addi	sp,sp,4
    4c48:	f800283a 	ret

00004c4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4c4c:	defffb04 	addi	sp,sp,-20
    4c50:	dfc00415 	stw	ra,16(sp)
    4c54:	df000315 	stw	fp,12(sp)
    4c58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4c5c:	d0a00217 	ldw	r2,-32760(gp)
    4c60:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4c64:	d0a1b317 	ldw	r2,-31028(gp)
    4c68:	10800044 	addi	r2,r2,1
    4c6c:	d0a1b315 	stw	r2,-31028(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4c70:	00003106 	br	4d38 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    4c74:	e0bffe17 	ldw	r2,-8(fp)
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4c80:	e0bffe17 	ldw	r2,-8(fp)
    4c84:	10800403 	ldbu	r2,16(r2)
    4c88:	10803fcc 	andi	r2,r2,255
    4c8c:	1005003a 	cmpeq	r2,r2,zero
    4c90:	1000051e 	bne	r2,zero,4ca8 <alt_tick+0x5c>
    4c94:	d0a1b317 	ldw	r2,-31028(gp)
    4c98:	1004c03a 	cmpne	r2,r2,zero
    4c9c:	1000021e 	bne	r2,zero,4ca8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    4ca0:	e0bffe17 	ldw	r2,-8(fp)
    4ca4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4ca8:	e0bffe17 	ldw	r2,-8(fp)
    4cac:	10c00217 	ldw	r3,8(r2)
    4cb0:	d0a1b317 	ldw	r2,-31028(gp)
    4cb4:	10c01e36 	bltu	r2,r3,4d30 <alt_tick+0xe4>
    4cb8:	e0bffe17 	ldw	r2,-8(fp)
    4cbc:	10800403 	ldbu	r2,16(r2)
    4cc0:	10803fcc 	andi	r2,r2,255
    4cc4:	1004c03a 	cmpne	r2,r2,zero
    4cc8:	1000191e 	bne	r2,zero,4d30 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    4ccc:	e0bffe17 	ldw	r2,-8(fp)
    4cd0:	10c00317 	ldw	r3,12(r2)
    4cd4:	e0bffe17 	ldw	r2,-8(fp)
    4cd8:	11000517 	ldw	r4,20(r2)
    4cdc:	183ee83a 	callr	r3
    4ce0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4ce4:	e0bffd17 	ldw	r2,-12(fp)
    4ce8:	1004c03a 	cmpne	r2,r2,zero
    4cec:	1000031e 	bne	r2,zero,4cfc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    4cf0:	e13ffe17 	ldw	r4,-8(fp)
    4cf4:	0004bb40 	call	4bb4 <alt_alarm_stop>
    4cf8:	00000d06 	br	4d30 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    4cfc:	e0bffe17 	ldw	r2,-8(fp)
    4d00:	10c00217 	ldw	r3,8(r2)
    4d04:	e0bffd17 	ldw	r2,-12(fp)
    4d08:	1887883a 	add	r3,r3,r2
    4d0c:	e0bffe17 	ldw	r2,-8(fp)
    4d10:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4d14:	e0bffe17 	ldw	r2,-8(fp)
    4d18:	10c00217 	ldw	r3,8(r2)
    4d1c:	d0a1b317 	ldw	r2,-31028(gp)
    4d20:	1880032e 	bgeu	r3,r2,4d30 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    4d24:	e0fffe17 	ldw	r3,-8(fp)
    4d28:	00800044 	movi	r2,1
    4d2c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    4d30:	e0bfff17 	ldw	r2,-4(fp)
    4d34:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d38:	d0e00204 	addi	r3,gp,-32760
    4d3c:	e0bffe17 	ldw	r2,-8(fp)
    4d40:	10ffcc1e 	bne	r2,r3,4c74 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    4d44:	e037883a 	mov	sp,fp
    4d48:	dfc00117 	ldw	ra,4(sp)
    4d4c:	df000017 	ldw	fp,0(sp)
    4d50:	dec00204 	addi	sp,sp,8
    4d54:	f800283a 	ret

00004d58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4d58:	defffd04 	addi	sp,sp,-12
    4d5c:	dfc00215 	stw	ra,8(sp)
    4d60:	df000115 	stw	fp,4(sp)
    4d64:	df000104 	addi	fp,sp,4
    4d68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROC, nios2_proc);
    4d6c:	00053040 	call	5304 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4d70:	00800044 	movi	r2,1
    4d74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4d78:	e037883a 	mov	sp,fp
    4d7c:	dfc00117 	ldw	ra,4(sp)
    4d80:	df000017 	ldw	fp,0(sp)
    4d84:	dec00204 	addi	sp,sp,8
    4d88:	f800283a 	ret

00004d8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4d8c:	defffe04 	addi	sp,sp,-8
    4d90:	dfc00115 	stw	ra,4(sp)
    4d94:	df000015 	stw	fp,0(sp)
    4d98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1337, sysid_1337);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LEDS, leds);
    4d9c:	01000034 	movhi	r4,0
    4da0:	21193a04 	addi	r4,r4,25832
    4da4:	0004de00 	call	4de0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSH_BUTTONS, push_buttons);
    4da8:	01000034 	movhi	r4,0
    4dac:	21194504 	addi	r4,r4,25876
    4db0:	0004de00 	call	4de0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SEVEN_SEGMENTS, seven_segments);
    4db4:	01000034 	movhi	r4,0
    4db8:	21195004 	addi	r4,r4,25920
    4dbc:	0004de00 	call	4de0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCHER, switcher);
    4dc0:	01000034 	movhi	r4,0
    4dc4:	21195b04 	addi	r4,r4,25964
    4dc8:	0004de00 	call	4de0 <alt_dev_reg>
}
    4dcc:	e037883a 	mov	sp,fp
    4dd0:	dfc00117 	ldw	ra,4(sp)
    4dd4:	df000017 	ldw	fp,0(sp)
    4dd8:	dec00204 	addi	sp,sp,8
    4ddc:	f800283a 	ret

00004de0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4de0:	defffd04 	addi	sp,sp,-12
    4de4:	dfc00215 	stw	ra,8(sp)
    4de8:	df000115 	stw	fp,4(sp)
    4dec:	df000104 	addi	fp,sp,4
    4df0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4df4:	e13fff17 	ldw	r4,-4(fp)
    4df8:	01400034 	movhi	r5,0
    4dfc:	2959d604 	addi	r5,r5,26456
    4e00:	00050000 	call	5000 <alt_dev_llist_insert>
}
    4e04:	e037883a 	mov	sp,fp
    4e08:	dfc00117 	ldw	ra,4(sp)
    4e0c:	df000017 	ldw	fp,0(sp)
    4e10:	dec00204 	addi	sp,sp,8
    4e14:	f800283a 	ret

00004e18 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    4e18:	defffc04 	addi	sp,sp,-16
    4e1c:	dfc00315 	stw	ra,12(sp)
    4e20:	df000215 	stw	fp,8(sp)
    4e24:	df000204 	addi	fp,sp,8
    4e28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    4e2c:	e13fff17 	ldw	r4,-4(fp)
    4e30:	01400034 	movhi	r5,0
    4e34:	2959d604 	addi	r5,r5,26456
    4e38:	00051dc0 	call	51dc <alt_find_dev>
    4e3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4e40:	e0bffe17 	ldw	r2,-8(fp)
}
    4e44:	e037883a 	mov	sp,fp
    4e48:	dfc00117 	ldw	ra,4(sp)
    4e4c:	df000017 	ldw	fp,0(sp)
    4e50:	dec00204 	addi	sp,sp,8
    4e54:	f800283a 	ret

00004e58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4e58:	defff804 	addi	sp,sp,-32
    4e5c:	dfc00715 	stw	ra,28(sp)
    4e60:	df000615 	stw	fp,24(sp)
    4e64:	df000604 	addi	fp,sp,24
    4e68:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4e6c:	e0bffc17 	ldw	r2,-16(fp)
    4e70:	1004803a 	cmplt	r2,r2,zero
    4e74:	1000091e 	bne	r2,zero,4e9c <close+0x44>
    4e78:	e13ffc17 	ldw	r4,-16(fp)
    4e7c:	01400304 	movi	r5,12
    4e80:	000459c0 	call	459c <__mulsi3>
    4e84:	1007883a 	mov	r3,r2
    4e88:	00800034 	movhi	r2,0
    4e8c:	10997004 	addi	r2,r2,26048
    4e90:	1887883a 	add	r3,r3,r2
    4e94:	e0ffff15 	stw	r3,-4(fp)
    4e98:	00000106 	br	4ea0 <close+0x48>
    4e9c:	e03fff15 	stw	zero,-4(fp)
    4ea0:	e0bfff17 	ldw	r2,-4(fp)
    4ea4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    4ea8:	e0bffb17 	ldw	r2,-20(fp)
    4eac:	1005003a 	cmpeq	r2,r2,zero
    4eb0:	10001d1e 	bne	r2,zero,4f28 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4eb4:	e0bffb17 	ldw	r2,-20(fp)
    4eb8:	10800017 	ldw	r2,0(r2)
    4ebc:	10800417 	ldw	r2,16(r2)
    4ec0:	1005003a 	cmpeq	r2,r2,zero
    4ec4:	1000071e 	bne	r2,zero,4ee4 <close+0x8c>
    4ec8:	e0bffb17 	ldw	r2,-20(fp)
    4ecc:	10800017 	ldw	r2,0(r2)
    4ed0:	10800417 	ldw	r2,16(r2)
    4ed4:	e13ffb17 	ldw	r4,-20(fp)
    4ed8:	103ee83a 	callr	r2
    4edc:	e0bffe15 	stw	r2,-8(fp)
    4ee0:	00000106 	br	4ee8 <close+0x90>
    4ee4:	e03ffe15 	stw	zero,-8(fp)
    4ee8:	e0bffe17 	ldw	r2,-8(fp)
    4eec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4ef0:	e13ffc17 	ldw	r4,-16(fp)
    4ef4:	000528c0 	call	528c <alt_release_fd>
    if (rval < 0)
    4ef8:	e0bffa17 	ldw	r2,-24(fp)
    4efc:	1004403a 	cmpge	r2,r2,zero
    4f00:	1000071e 	bne	r2,zero,4f20 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    4f04:	0004f580 	call	4f58 <alt_get_errno>
    4f08:	e0fffa17 	ldw	r3,-24(fp)
    4f0c:	00c7c83a 	sub	r3,zero,r3
    4f10:	10c00015 	stw	r3,0(r2)
      return -1;
    4f14:	00bfffc4 	movi	r2,-1
    4f18:	e0bffd15 	stw	r2,-12(fp)
    4f1c:	00000806 	br	4f40 <close+0xe8>
    }
    return 0;
    4f20:	e03ffd15 	stw	zero,-12(fp)
    4f24:	00000606 	br	4f40 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4f28:	0004f580 	call	4f58 <alt_get_errno>
    4f2c:	1007883a 	mov	r3,r2
    4f30:	00801444 	movi	r2,81
    4f34:	18800015 	stw	r2,0(r3)
    return -1;
    4f38:	00bfffc4 	movi	r2,-1
    4f3c:	e0bffd15 	stw	r2,-12(fp)
    4f40:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    4f44:	e037883a 	mov	sp,fp
    4f48:	dfc00117 	ldw	ra,4(sp)
    4f4c:	df000017 	ldw	fp,0(sp)
    4f50:	dec00204 	addi	sp,sp,8
    4f54:	f800283a 	ret

00004f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f58:	defffd04 	addi	sp,sp,-12
    4f5c:	dfc00215 	stw	ra,8(sp)
    4f60:	df000115 	stw	fp,4(sp)
    4f64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4f68:	00800034 	movhi	r2,0
    4f6c:	1099d904 	addi	r2,r2,26468
    4f70:	10800017 	ldw	r2,0(r2)
    4f74:	1005003a 	cmpeq	r2,r2,zero
    4f78:	1000061e 	bne	r2,zero,4f94 <alt_get_errno+0x3c>
    4f7c:	00800034 	movhi	r2,0
    4f80:	1099d904 	addi	r2,r2,26468
    4f84:	10800017 	ldw	r2,0(r2)
    4f88:	103ee83a 	callr	r2
    4f8c:	e0bfff15 	stw	r2,-4(fp)
    4f90:	00000306 	br	4fa0 <alt_get_errno+0x48>
    4f94:	00800034 	movhi	r2,0
    4f98:	109b7a04 	addi	r2,r2,28136
    4f9c:	e0bfff15 	stw	r2,-4(fp)
    4fa0:	e0bfff17 	ldw	r2,-4(fp)
}
    4fa4:	e037883a 	mov	sp,fp
    4fa8:	dfc00117 	ldw	ra,4(sp)
    4fac:	df000017 	ldw	fp,0(sp)
    4fb0:	dec00204 	addi	sp,sp,8
    4fb4:	f800283a 	ret

00004fb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4fb8:	deffff04 	addi	sp,sp,-4
    4fbc:	df000015 	stw	fp,0(sp)
    4fc0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4fc4:	e037883a 	mov	sp,fp
    4fc8:	df000017 	ldw	fp,0(sp)
    4fcc:	dec00104 	addi	sp,sp,4
    4fd0:	f800283a 	ret

00004fd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4fd4:	defffc04 	addi	sp,sp,-16
    4fd8:	df000315 	stw	fp,12(sp)
    4fdc:	df000304 	addi	fp,sp,12
    4fe0:	e13ffd15 	stw	r4,-12(fp)
    4fe4:	e17ffe15 	stw	r5,-8(fp)
    4fe8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4fec:	e0bfff17 	ldw	r2,-4(fp)
}
    4ff0:	e037883a 	mov	sp,fp
    4ff4:	df000017 	ldw	fp,0(sp)
    4ff8:	dec00104 	addi	sp,sp,4
    4ffc:	f800283a 	ret

00005000 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5000:	defff904 	addi	sp,sp,-28
    5004:	dfc00615 	stw	ra,24(sp)
    5008:	df000515 	stw	fp,20(sp)
    500c:	df000504 	addi	fp,sp,20
    5010:	e13ffd15 	stw	r4,-12(fp)
    5014:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5018:	e0bffd17 	ldw	r2,-12(fp)
    501c:	1005003a 	cmpeq	r2,r2,zero
    5020:	1000041e 	bne	r2,zero,5034 <alt_dev_llist_insert+0x34>
    5024:	e0bffd17 	ldw	r2,-12(fp)
    5028:	10800217 	ldw	r2,8(r2)
    502c:	1004c03a 	cmpne	r2,r2,zero
    5030:	1000071e 	bne	r2,zero,5050 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    5034:	00050b40 	call	50b4 <alt_get_errno>
    5038:	1007883a 	mov	r3,r2
    503c:	00800584 	movi	r2,22
    5040:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5044:	00bffa84 	movi	r2,-22
    5048:	e0bfff15 	stw	r2,-4(fp)
    504c:	00001306 	br	509c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5050:	e0fffd17 	ldw	r3,-12(fp)
    5054:	e0bffe17 	ldw	r2,-8(fp)
    5058:	e0bffb15 	stw	r2,-20(fp)
    505c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5060:	e0fffc17 	ldw	r3,-16(fp)
    5064:	e0bffb17 	ldw	r2,-20(fp)
    5068:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    506c:	e0bffb17 	ldw	r2,-20(fp)
    5070:	10c00017 	ldw	r3,0(r2)
    5074:	e0bffc17 	ldw	r2,-16(fp)
    5078:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    507c:	e0bffb17 	ldw	r2,-20(fp)
    5080:	10c00017 	ldw	r3,0(r2)
    5084:	e0bffc17 	ldw	r2,-16(fp)
    5088:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    508c:	e0fffb17 	ldw	r3,-20(fp)
    5090:	e0bffc17 	ldw	r2,-16(fp)
    5094:	18800015 	stw	r2,0(r3)

  return 0;  
    5098:	e03fff15 	stw	zero,-4(fp)
    509c:	e0bfff17 	ldw	r2,-4(fp)
}
    50a0:	e037883a 	mov	sp,fp
    50a4:	dfc00117 	ldw	ra,4(sp)
    50a8:	df000017 	ldw	fp,0(sp)
    50ac:	dec00204 	addi	sp,sp,8
    50b0:	f800283a 	ret

000050b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    50b4:	defffd04 	addi	sp,sp,-12
    50b8:	dfc00215 	stw	ra,8(sp)
    50bc:	df000115 	stw	fp,4(sp)
    50c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    50c4:	00800034 	movhi	r2,0
    50c8:	1099d904 	addi	r2,r2,26468
    50cc:	10800017 	ldw	r2,0(r2)
    50d0:	1005003a 	cmpeq	r2,r2,zero
    50d4:	1000061e 	bne	r2,zero,50f0 <alt_get_errno+0x3c>
    50d8:	00800034 	movhi	r2,0
    50dc:	1099d904 	addi	r2,r2,26468
    50e0:	10800017 	ldw	r2,0(r2)
    50e4:	103ee83a 	callr	r2
    50e8:	e0bfff15 	stw	r2,-4(fp)
    50ec:	00000306 	br	50fc <alt_get_errno+0x48>
    50f0:	00800034 	movhi	r2,0
    50f4:	109b7a04 	addi	r2,r2,28136
    50f8:	e0bfff15 	stw	r2,-4(fp)
    50fc:	e0bfff17 	ldw	r2,-4(fp)
}
    5100:	e037883a 	mov	sp,fp
    5104:	dfc00117 	ldw	ra,4(sp)
    5108:	df000017 	ldw	fp,0(sp)
    510c:	dec00204 	addi	sp,sp,8
    5110:	f800283a 	ret

00005114 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5114:	defffd04 	addi	sp,sp,-12
    5118:	dfc00215 	stw	ra,8(sp)
    511c:	df000115 	stw	fp,4(sp)
    5120:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5124:	00bfff04 	movi	r2,-4
    5128:	00c00034 	movhi	r3,0
    512c:	18d7d404 	addi	r3,r3,24400
    5130:	1885883a 	add	r2,r3,r2
    5134:	e0bfff15 	stw	r2,-4(fp)
    5138:	00000606 	br	5154 <_do_ctors+0x40>
        (*ctor) (); 
    513c:	e0bfff17 	ldw	r2,-4(fp)
    5140:	10800017 	ldw	r2,0(r2)
    5144:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5148:	e0bfff17 	ldw	r2,-4(fp)
    514c:	10bfff04 	addi	r2,r2,-4
    5150:	e0bfff15 	stw	r2,-4(fp)
    5154:	e0ffff17 	ldw	r3,-4(fp)
    5158:	00800034 	movhi	r2,0
    515c:	1097d304 	addi	r2,r2,24396
    5160:	18bff62e 	bgeu	r3,r2,513c <_do_ctors+0x28>
        (*ctor) (); 
}
    5164:	e037883a 	mov	sp,fp
    5168:	dfc00117 	ldw	ra,4(sp)
    516c:	df000017 	ldw	fp,0(sp)
    5170:	dec00204 	addi	sp,sp,8
    5174:	f800283a 	ret

00005178 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5178:	defffd04 	addi	sp,sp,-12
    517c:	dfc00215 	stw	ra,8(sp)
    5180:	df000115 	stw	fp,4(sp)
    5184:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5188:	00bfff04 	movi	r2,-4
    518c:	00c00034 	movhi	r3,0
    5190:	18d7d404 	addi	r3,r3,24400
    5194:	1885883a 	add	r2,r3,r2
    5198:	e0bfff15 	stw	r2,-4(fp)
    519c:	00000606 	br	51b8 <_do_dtors+0x40>
        (*dtor) (); 
    51a0:	e0bfff17 	ldw	r2,-4(fp)
    51a4:	10800017 	ldw	r2,0(r2)
    51a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    51ac:	e0bfff17 	ldw	r2,-4(fp)
    51b0:	10bfff04 	addi	r2,r2,-4
    51b4:	e0bfff15 	stw	r2,-4(fp)
    51b8:	e0ffff17 	ldw	r3,-4(fp)
    51bc:	00800034 	movhi	r2,0
    51c0:	1097d404 	addi	r2,r2,24400
    51c4:	18bff62e 	bgeu	r3,r2,51a0 <_do_dtors+0x28>
        (*dtor) (); 
}
    51c8:	e037883a 	mov	sp,fp
    51cc:	dfc00117 	ldw	ra,4(sp)
    51d0:	df000017 	ldw	fp,0(sp)
    51d4:	dec00204 	addi	sp,sp,8
    51d8:	f800283a 	ret

000051dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    51dc:	defff904 	addi	sp,sp,-28
    51e0:	dfc00615 	stw	ra,24(sp)
    51e4:	df000515 	stw	fp,20(sp)
    51e8:	df000504 	addi	fp,sp,20
    51ec:	e13ffd15 	stw	r4,-12(fp)
    51f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    51f4:	e0bffe17 	ldw	r2,-8(fp)
    51f8:	10800017 	ldw	r2,0(r2)
    51fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5200:	e13ffd17 	ldw	r4,-12(fp)
    5204:	00053e40 	call	53e4 <strlen>
    5208:	10800044 	addi	r2,r2,1
    520c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5210:	00000d06 	br	5248 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5214:	e0bffc17 	ldw	r2,-16(fp)
    5218:	11000217 	ldw	r4,8(r2)
    521c:	e1bffb17 	ldw	r6,-20(fp)
    5220:	e17ffd17 	ldw	r5,-12(fp)
    5224:	00053700 	call	5370 <memcmp>
    5228:	1004c03a 	cmpne	r2,r2,zero
    522c:	1000031e 	bne	r2,zero,523c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5230:	e0bffc17 	ldw	r2,-16(fp)
    5234:	e0bfff15 	stw	r2,-4(fp)
    5238:	00000706 	br	5258 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    523c:	e0bffc17 	ldw	r2,-16(fp)
    5240:	10800017 	ldw	r2,0(r2)
    5244:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5248:	e0fffe17 	ldw	r3,-8(fp)
    524c:	e0bffc17 	ldw	r2,-16(fp)
    5250:	10fff01e 	bne	r2,r3,5214 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5254:	e03fff15 	stw	zero,-4(fp)
    5258:	e0bfff17 	ldw	r2,-4(fp)
}
    525c:	e037883a 	mov	sp,fp
    5260:	dfc00117 	ldw	ra,4(sp)
    5264:	df000017 	ldw	fp,0(sp)
    5268:	dec00204 	addi	sp,sp,8
    526c:	f800283a 	ret

00005270 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5270:	deffff04 	addi	sp,sp,-4
    5274:	df000015 	stw	fp,0(sp)
    5278:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    527c:	e037883a 	mov	sp,fp
    5280:	df000017 	ldw	fp,0(sp)
    5284:	dec00104 	addi	sp,sp,4
    5288:	f800283a 	ret

0000528c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    528c:	defffc04 	addi	sp,sp,-16
    5290:	dfc00315 	stw	ra,12(sp)
    5294:	df000215 	stw	fp,8(sp)
    5298:	dc000115 	stw	r16,4(sp)
    529c:	df000104 	addi	fp,sp,4
    52a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    52a4:	e0bfff17 	ldw	r2,-4(fp)
    52a8:	108000d0 	cmplti	r2,r2,3
    52ac:	10000f1e 	bne	r2,zero,52ec <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    52b0:	e13fff17 	ldw	r4,-4(fp)
    52b4:	04000034 	movhi	r16,0
    52b8:	84197004 	addi	r16,r16,26048
    52bc:	01400304 	movi	r5,12
    52c0:	000459c0 	call	459c <__mulsi3>
    52c4:	1405883a 	add	r2,r2,r16
    52c8:	10800204 	addi	r2,r2,8
    52cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    52d0:	e13fff17 	ldw	r4,-4(fp)
    52d4:	04000034 	movhi	r16,0
    52d8:	84197004 	addi	r16,r16,26048
    52dc:	01400304 	movi	r5,12
    52e0:	000459c0 	call	459c <__mulsi3>
    52e4:	1405883a 	add	r2,r2,r16
    52e8:	10000015 	stw	zero,0(r2)
  }
}
    52ec:	e037883a 	mov	sp,fp
    52f0:	dfc00217 	ldw	ra,8(sp)
    52f4:	df000117 	ldw	fp,4(sp)
    52f8:	dc000017 	ldw	r16,0(sp)
    52fc:	dec00304 	addi	sp,sp,12
    5300:	f800283a 	ret

00005304 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    5304:	deffff04 	addi	sp,sp,-4
    5308:	df000015 	stw	fp,0(sp)
    530c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5310:	000170fa 	wrctl	ienable,zero
}
    5314:	e037883a 	mov	sp,fp
    5318:	df000017 	ldw	fp,0(sp)
    531c:	dec00104 	addi	sp,sp,4
    5320:	f800283a 	ret

00005324 <atexit>:
    5324:	200b883a 	mov	r5,r4
    5328:	000d883a 	mov	r6,zero
    532c:	0009883a 	mov	r4,zero
    5330:	000f883a 	mov	r7,zero
    5334:	00054581 	jmpi	5458 <__register_exitproc>

00005338 <exit>:
    5338:	defffe04 	addi	sp,sp,-8
    533c:	000b883a 	mov	r5,zero
    5340:	dc000015 	stw	r16,0(sp)
    5344:	dfc00115 	stw	ra,4(sp)
    5348:	2021883a 	mov	r16,r4
    534c:	00055900 	call	5590 <__call_exitprocs>
    5350:	00800034 	movhi	r2,0
    5354:	1099d104 	addi	r2,r2,26436
    5358:	11000017 	ldw	r4,0(r2)
    535c:	20800f17 	ldw	r2,60(r4)
    5360:	10000126 	beq	r2,zero,5368 <exit+0x30>
    5364:	103ee83a 	callr	r2
    5368:	8009883a 	mov	r4,r16
    536c:	0005f2c0 	call	5f2c <_exit>

00005370 <memcmp>:
    5370:	00c000c4 	movi	r3,3
    5374:	1980032e 	bgeu	r3,r6,5384 <memcmp+0x14>
    5378:	2144b03a 	or	r2,r4,r5
    537c:	10c4703a 	and	r2,r2,r3
    5380:	10000f26 	beq	r2,zero,53c0 <memcmp+0x50>
    5384:	31ffffc4 	addi	r7,r6,-1
    5388:	3000061e 	bne	r6,zero,53a4 <memcmp+0x34>
    538c:	00000a06 	br	53b8 <memcmp+0x48>
    5390:	39ffffc4 	addi	r7,r7,-1
    5394:	00bfffc4 	movi	r2,-1
    5398:	21000044 	addi	r4,r4,1
    539c:	29400044 	addi	r5,r5,1
    53a0:	38800526 	beq	r7,r2,53b8 <memcmp+0x48>
    53a4:	20c00003 	ldbu	r3,0(r4)
    53a8:	28800003 	ldbu	r2,0(r5)
    53ac:	18bff826 	beq	r3,r2,5390 <memcmp+0x20>
    53b0:	1885c83a 	sub	r2,r3,r2
    53b4:	f800283a 	ret
    53b8:	0005883a 	mov	r2,zero
    53bc:	f800283a 	ret
    53c0:	180f883a 	mov	r7,r3
    53c4:	20c00017 	ldw	r3,0(r4)
    53c8:	28800017 	ldw	r2,0(r5)
    53cc:	18bfed1e 	bne	r3,r2,5384 <memcmp+0x14>
    53d0:	31bfff04 	addi	r6,r6,-4
    53d4:	21000104 	addi	r4,r4,4
    53d8:	29400104 	addi	r5,r5,4
    53dc:	39bff936 	bltu	r7,r6,53c4 <memcmp+0x54>
    53e0:	003fe806 	br	5384 <memcmp+0x14>

000053e4 <strlen>:
    53e4:	208000cc 	andi	r2,r4,3
    53e8:	2011883a 	mov	r8,r4
    53ec:	1000161e 	bne	r2,zero,5448 <strlen+0x64>
    53f0:	20c00017 	ldw	r3,0(r4)
    53f4:	017fbff4 	movhi	r5,65279
    53f8:	297fbfc4 	addi	r5,r5,-257
    53fc:	01e02074 	movhi	r7,32897
    5400:	39e02004 	addi	r7,r7,-32640
    5404:	1945883a 	add	r2,r3,r5
    5408:	11c4703a 	and	r2,r2,r7
    540c:	00c6303a 	nor	r3,zero,r3
    5410:	1886703a 	and	r3,r3,r2
    5414:	18000c1e 	bne	r3,zero,5448 <strlen+0x64>
    5418:	280d883a 	mov	r6,r5
    541c:	380b883a 	mov	r5,r7
    5420:	21000104 	addi	r4,r4,4
    5424:	20800017 	ldw	r2,0(r4)
    5428:	1187883a 	add	r3,r2,r6
    542c:	1946703a 	and	r3,r3,r5
    5430:	0084303a 	nor	r2,zero,r2
    5434:	10c4703a 	and	r2,r2,r3
    5438:	103ff926 	beq	r2,zero,5420 <strlen+0x3c>
    543c:	20800007 	ldb	r2,0(r4)
    5440:	10000326 	beq	r2,zero,5450 <strlen+0x6c>
    5444:	21000044 	addi	r4,r4,1
    5448:	20800007 	ldb	r2,0(r4)
    544c:	103ffd1e 	bne	r2,zero,5444 <strlen+0x60>
    5450:	2205c83a 	sub	r2,r4,r8
    5454:	f800283a 	ret

00005458 <__register_exitproc>:
    5458:	defffa04 	addi	sp,sp,-24
    545c:	00800034 	movhi	r2,0
    5460:	1099d104 	addi	r2,r2,26436
    5464:	dc000015 	stw	r16,0(sp)
    5468:	14000017 	ldw	r16,0(r2)
    546c:	dd000415 	stw	r20,16(sp)
    5470:	2829883a 	mov	r20,r5
    5474:	81405217 	ldw	r5,328(r16)
    5478:	dcc00315 	stw	r19,12(sp)
    547c:	dc800215 	stw	r18,8(sp)
    5480:	dc400115 	stw	r17,4(sp)
    5484:	dfc00515 	stw	ra,20(sp)
    5488:	2023883a 	mov	r17,r4
    548c:	3027883a 	mov	r19,r6
    5490:	3825883a 	mov	r18,r7
    5494:	28002526 	beq	r5,zero,552c <__register_exitproc+0xd4>
    5498:	29000117 	ldw	r4,4(r5)
    549c:	008007c4 	movi	r2,31
    54a0:	11002716 	blt	r2,r4,5540 <__register_exitproc+0xe8>
    54a4:	8800101e 	bne	r17,zero,54e8 <__register_exitproc+0x90>
    54a8:	2105883a 	add	r2,r4,r4
    54ac:	1085883a 	add	r2,r2,r2
    54b0:	20c00044 	addi	r3,r4,1
    54b4:	1145883a 	add	r2,r2,r5
    54b8:	0009883a 	mov	r4,zero
    54bc:	15000215 	stw	r20,8(r2)
    54c0:	28c00115 	stw	r3,4(r5)
    54c4:	2005883a 	mov	r2,r4
    54c8:	dfc00517 	ldw	ra,20(sp)
    54cc:	dd000417 	ldw	r20,16(sp)
    54d0:	dcc00317 	ldw	r19,12(sp)
    54d4:	dc800217 	ldw	r18,8(sp)
    54d8:	dc400117 	ldw	r17,4(sp)
    54dc:	dc000017 	ldw	r16,0(sp)
    54e0:	dec00604 	addi	sp,sp,24
    54e4:	f800283a 	ret
    54e8:	29802204 	addi	r6,r5,136
    54ec:	00800044 	movi	r2,1
    54f0:	110e983a 	sll	r7,r2,r4
    54f4:	30c04017 	ldw	r3,256(r6)
    54f8:	2105883a 	add	r2,r4,r4
    54fc:	1085883a 	add	r2,r2,r2
    5500:	1185883a 	add	r2,r2,r6
    5504:	19c6b03a 	or	r3,r3,r7
    5508:	14802015 	stw	r18,128(r2)
    550c:	14c00015 	stw	r19,0(r2)
    5510:	00800084 	movi	r2,2
    5514:	30c04015 	stw	r3,256(r6)
    5518:	88bfe31e 	bne	r17,r2,54a8 <__register_exitproc+0x50>
    551c:	30804117 	ldw	r2,260(r6)
    5520:	11c4b03a 	or	r2,r2,r7
    5524:	30804115 	stw	r2,260(r6)
    5528:	003fdf06 	br	54a8 <__register_exitproc+0x50>
    552c:	00800034 	movhi	r2,0
    5530:	109b8404 	addi	r2,r2,28176
    5534:	100b883a 	mov	r5,r2
    5538:	80805215 	stw	r2,328(r16)
    553c:	003fd606 	br	5498 <__register_exitproc+0x40>
    5540:	00800034 	movhi	r2,0
    5544:	10800004 	addi	r2,r2,0
    5548:	1000021e 	bne	r2,zero,5554 <__register_exitproc+0xfc>
    554c:	013fffc4 	movi	r4,-1
    5550:	003fdc06 	br	54c4 <__register_exitproc+0x6c>
    5554:	01006404 	movi	r4,400
    5558:	103ee83a 	callr	r2
    555c:	1007883a 	mov	r3,r2
    5560:	103ffa26 	beq	r2,zero,554c <__register_exitproc+0xf4>
    5564:	80805217 	ldw	r2,328(r16)
    5568:	180b883a 	mov	r5,r3
    556c:	18000115 	stw	zero,4(r3)
    5570:	18800015 	stw	r2,0(r3)
    5574:	80c05215 	stw	r3,328(r16)
    5578:	18006215 	stw	zero,392(r3)
    557c:	18006315 	stw	zero,396(r3)
    5580:	0009883a 	mov	r4,zero
    5584:	883fc826 	beq	r17,zero,54a8 <__register_exitproc+0x50>
    5588:	003fd706 	br	54e8 <__register_exitproc+0x90>

0000558c <register_fini>:
    558c:	f800283a 	ret

00005590 <__call_exitprocs>:
    5590:	00800034 	movhi	r2,0
    5594:	1099d104 	addi	r2,r2,26436
    5598:	10800017 	ldw	r2,0(r2)
    559c:	defff304 	addi	sp,sp,-52
    55a0:	df000b15 	stw	fp,44(sp)
    55a4:	d8800115 	stw	r2,4(sp)
    55a8:	00800034 	movhi	r2,0
    55ac:	10800004 	addi	r2,r2,0
    55b0:	1005003a 	cmpeq	r2,r2,zero
    55b4:	d8800215 	stw	r2,8(sp)
    55b8:	d8800117 	ldw	r2,4(sp)
    55bc:	dd400815 	stw	r21,32(sp)
    55c0:	dd000715 	stw	r20,28(sp)
    55c4:	10805204 	addi	r2,r2,328
    55c8:	dfc00c15 	stw	ra,48(sp)
    55cc:	ddc00a15 	stw	r23,40(sp)
    55d0:	dd800915 	stw	r22,36(sp)
    55d4:	dcc00615 	stw	r19,24(sp)
    55d8:	dc800515 	stw	r18,20(sp)
    55dc:	dc400415 	stw	r17,16(sp)
    55e0:	dc000315 	stw	r16,12(sp)
    55e4:	282b883a 	mov	r21,r5
    55e8:	2039883a 	mov	fp,r4
    55ec:	d8800015 	stw	r2,0(sp)
    55f0:	2829003a 	cmpeq	r20,r5,zero
    55f4:	d8800117 	ldw	r2,4(sp)
    55f8:	14405217 	ldw	r17,328(r2)
    55fc:	88001026 	beq	r17,zero,5640 <__call_exitprocs+0xb0>
    5600:	ddc00017 	ldw	r23,0(sp)
    5604:	88800117 	ldw	r2,4(r17)
    5608:	8c802204 	addi	r18,r17,136
    560c:	143fffc4 	addi	r16,r2,-1
    5610:	80000916 	blt	r16,zero,5638 <__call_exitprocs+0xa8>
    5614:	05bfffc4 	movi	r22,-1
    5618:	a000151e 	bne	r20,zero,5670 <__call_exitprocs+0xe0>
    561c:	8409883a 	add	r4,r16,r16
    5620:	2105883a 	add	r2,r4,r4
    5624:	1485883a 	add	r2,r2,r18
    5628:	10c02017 	ldw	r3,128(r2)
    562c:	a8c01126 	beq	r21,r3,5674 <__call_exitprocs+0xe4>
    5630:	843fffc4 	addi	r16,r16,-1
    5634:	85bff81e 	bne	r16,r22,5618 <__call_exitprocs+0x88>
    5638:	d8800217 	ldw	r2,8(sp)
    563c:	10003126 	beq	r2,zero,5704 <__call_exitprocs+0x174>
    5640:	dfc00c17 	ldw	ra,48(sp)
    5644:	df000b17 	ldw	fp,44(sp)
    5648:	ddc00a17 	ldw	r23,40(sp)
    564c:	dd800917 	ldw	r22,36(sp)
    5650:	dd400817 	ldw	r21,32(sp)
    5654:	dd000717 	ldw	r20,28(sp)
    5658:	dcc00617 	ldw	r19,24(sp)
    565c:	dc800517 	ldw	r18,20(sp)
    5660:	dc400417 	ldw	r17,16(sp)
    5664:	dc000317 	ldw	r16,12(sp)
    5668:	dec00d04 	addi	sp,sp,52
    566c:	f800283a 	ret
    5670:	8409883a 	add	r4,r16,r16
    5674:	88c00117 	ldw	r3,4(r17)
    5678:	2105883a 	add	r2,r4,r4
    567c:	1445883a 	add	r2,r2,r17
    5680:	18ffffc4 	addi	r3,r3,-1
    5684:	11800217 	ldw	r6,8(r2)
    5688:	1c001526 	beq	r3,r16,56e0 <__call_exitprocs+0x150>
    568c:	10000215 	stw	zero,8(r2)
    5690:	303fe726 	beq	r6,zero,5630 <__call_exitprocs+0xa0>
    5694:	00c00044 	movi	r3,1
    5698:	1c06983a 	sll	r3,r3,r16
    569c:	90804017 	ldw	r2,256(r18)
    56a0:	8cc00117 	ldw	r19,4(r17)
    56a4:	1884703a 	and	r2,r3,r2
    56a8:	10001426 	beq	r2,zero,56fc <__call_exitprocs+0x16c>
    56ac:	90804117 	ldw	r2,260(r18)
    56b0:	1884703a 	and	r2,r3,r2
    56b4:	10000c1e 	bne	r2,zero,56e8 <__call_exitprocs+0x158>
    56b8:	2105883a 	add	r2,r4,r4
    56bc:	1485883a 	add	r2,r2,r18
    56c0:	11400017 	ldw	r5,0(r2)
    56c4:	e009883a 	mov	r4,fp
    56c8:	303ee83a 	callr	r6
    56cc:	88800117 	ldw	r2,4(r17)
    56d0:	98bfc81e 	bne	r19,r2,55f4 <__call_exitprocs+0x64>
    56d4:	b8800017 	ldw	r2,0(r23)
    56d8:	147fd526 	beq	r2,r17,5630 <__call_exitprocs+0xa0>
    56dc:	003fc506 	br	55f4 <__call_exitprocs+0x64>
    56e0:	8c000115 	stw	r16,4(r17)
    56e4:	003fea06 	br	5690 <__call_exitprocs+0x100>
    56e8:	2105883a 	add	r2,r4,r4
    56ec:	1485883a 	add	r2,r2,r18
    56f0:	11000017 	ldw	r4,0(r2)
    56f4:	303ee83a 	callr	r6
    56f8:	003ff406 	br	56cc <__call_exitprocs+0x13c>
    56fc:	303ee83a 	callr	r6
    5700:	003ff206 	br	56cc <__call_exitprocs+0x13c>
    5704:	88800117 	ldw	r2,4(r17)
    5708:	1000081e 	bne	r2,zero,572c <__call_exitprocs+0x19c>
    570c:	89000017 	ldw	r4,0(r17)
    5710:	20000726 	beq	r4,zero,5730 <__call_exitprocs+0x1a0>
    5714:	b9000015 	stw	r4,0(r23)
    5718:	8809883a 	mov	r4,r17
    571c:	00000000 	call	0 <__alt_mem_onchip_memory-0x4000>
    5720:	bc400017 	ldw	r17,0(r23)
    5724:	883fb71e 	bne	r17,zero,5604 <__call_exitprocs+0x74>
    5728:	003fc506 	br	5640 <__call_exitprocs+0xb0>
    572c:	89000017 	ldw	r4,0(r17)
    5730:	882f883a 	mov	r23,r17
    5734:	2023883a 	mov	r17,r4
    5738:	883fb21e 	bne	r17,zero,5604 <__call_exitprocs+0x74>
    573c:	003fc006 	br	5640 <__call_exitprocs+0xb0>

00005740 <__umoddi3>:
    5740:	defff004 	addi	sp,sp,-64
    5744:	3011883a 	mov	r8,r6
    5748:	000d883a 	mov	r6,zero
    574c:	dd400b15 	stw	r21,44(sp)
    5750:	dcc00915 	stw	r19,36(sp)
    5754:	dc000615 	stw	r16,24(sp)
    5758:	dfc00f15 	stw	ra,60(sp)
    575c:	df000e15 	stw	fp,56(sp)
    5760:	ddc00d15 	stw	r23,52(sp)
    5764:	dd800c15 	stw	r22,48(sp)
    5768:	dd000a15 	stw	r20,40(sp)
    576c:	dc800815 	stw	r18,32(sp)
    5770:	dc400715 	stw	r17,28(sp)
    5774:	2817883a 	mov	r11,r5
    5778:	d9800415 	stw	r6,16(sp)
    577c:	4027883a 	mov	r19,r8
    5780:	d9800515 	stw	r6,20(sp)
    5784:	2021883a 	mov	r16,r4
    5788:	282b883a 	mov	r21,r5
    578c:	38002c1e 	bne	r7,zero,5840 <__umoddi3+0x100>
    5790:	2a005636 	bltu	r5,r8,58ec <__umoddi3+0x1ac>
    5794:	40009a26 	beq	r8,zero,5a00 <__umoddi3+0x2c0>
    5798:	00bfffd4 	movui	r2,65535
    579c:	14c09236 	bltu	r2,r19,59e8 <__umoddi3+0x2a8>
    57a0:	00803fc4 	movi	r2,255
    57a4:	14c15c36 	bltu	r2,r19,5d18 <__umoddi3+0x5d8>
    57a8:	000b883a 	mov	r5,zero
    57ac:	0005883a 	mov	r2,zero
    57b0:	9884d83a 	srl	r2,r19,r2
    57b4:	01000034 	movhi	r4,0
    57b8:	2117fa04 	addi	r4,r4,24552
    57bc:	01800804 	movi	r6,32
    57c0:	1105883a 	add	r2,r2,r4
    57c4:	10c00003 	ldbu	r3,0(r2)
    57c8:	28c7883a 	add	r3,r5,r3
    57cc:	30e5c83a 	sub	r18,r6,r3
    57d0:	9000a41e 	bne	r18,zero,5a64 <__umoddi3+0x324>
    57d4:	982ed43a 	srli	r23,r19,16
    57d8:	acebc83a 	sub	r21,r21,r19
    57dc:	9d3fffcc 	andi	r20,r19,65535
    57e0:	002d883a 	mov	r22,zero
    57e4:	a809883a 	mov	r4,r21
    57e8:	b80b883a 	mov	r5,r23
    57ec:	0005edc0 	call	5edc <__udivsi3>
    57f0:	100b883a 	mov	r5,r2
    57f4:	a009883a 	mov	r4,r20
    57f8:	000459c0 	call	459c <__mulsi3>
    57fc:	a809883a 	mov	r4,r21
    5800:	b80b883a 	mov	r5,r23
    5804:	1023883a 	mov	r17,r2
    5808:	0005ee40 	call	5ee4 <__umodsi3>
    580c:	1004943a 	slli	r2,r2,16
    5810:	8006d43a 	srli	r3,r16,16
    5814:	10c4b03a 	or	r2,r2,r3
    5818:	1440032e 	bgeu	r2,r17,5828 <__umoddi3+0xe8>
    581c:	14c5883a 	add	r2,r2,r19
    5820:	14c00136 	bltu	r2,r19,5828 <__umoddi3+0xe8>
    5824:	14415836 	bltu	r2,r17,5d88 <__umoddi3+0x648>
    5828:	1463c83a 	sub	r17,r2,r17
    582c:	8809883a 	mov	r4,r17
    5830:	b80b883a 	mov	r5,r23
    5834:	0005edc0 	call	5edc <__udivsi3>
    5838:	a009883a 	mov	r4,r20
    583c:	00005306 	br	598c <__umoddi3+0x24c>
    5840:	380d883a 	mov	r6,r7
    5844:	29c0132e 	bgeu	r5,r7,5894 <__umoddi3+0x154>
    5848:	d9000415 	stw	r4,16(sp)
    584c:	d9400515 	stw	r5,20(sp)
    5850:	d9400417 	ldw	r5,16(sp)
    5854:	5813883a 	mov	r9,r11
    5858:	2811883a 	mov	r8,r5
    585c:	4005883a 	mov	r2,r8
    5860:	4807883a 	mov	r3,r9
    5864:	dfc00f17 	ldw	ra,60(sp)
    5868:	df000e17 	ldw	fp,56(sp)
    586c:	ddc00d17 	ldw	r23,52(sp)
    5870:	dd800c17 	ldw	r22,48(sp)
    5874:	dd400b17 	ldw	r21,44(sp)
    5878:	dd000a17 	ldw	r20,40(sp)
    587c:	dcc00917 	ldw	r19,36(sp)
    5880:	dc800817 	ldw	r18,32(sp)
    5884:	dc400717 	ldw	r17,28(sp)
    5888:	dc000617 	ldw	r16,24(sp)
    588c:	dec01004 	addi	sp,sp,64
    5890:	f800283a 	ret
    5894:	00bfffd4 	movui	r2,65535
    5898:	11c06636 	bltu	r2,r7,5a34 <__umoddi3+0x2f4>
    589c:	00803fc4 	movi	r2,255
    58a0:	11c12036 	bltu	r2,r7,5d24 <__umoddi3+0x5e4>
    58a4:	000b883a 	mov	r5,zero
    58a8:	0005883a 	mov	r2,zero
    58ac:	3084d83a 	srl	r2,r6,r2
    58b0:	01000034 	movhi	r4,0
    58b4:	2117fa04 	addi	r4,r4,24552
    58b8:	01c00804 	movi	r7,32
    58bc:	1105883a 	add	r2,r2,r4
    58c0:	10c00003 	ldbu	r3,0(r2)
    58c4:	28c7883a 	add	r3,r5,r3
    58c8:	38e5c83a 	sub	r18,r7,r3
    58cc:	9000941e 	bne	r18,zero,5b20 <__umoddi3+0x3e0>
    58d0:	35405e36 	bltu	r6,r21,5a4c <__umoddi3+0x30c>
    58d4:	84c05d2e 	bgeu	r16,r19,5a4c <__umoddi3+0x30c>
    58d8:	8011883a 	mov	r8,r16
    58dc:	a813883a 	mov	r9,r21
    58e0:	dc000415 	stw	r16,16(sp)
    58e4:	dd400515 	stw	r21,20(sp)
    58e8:	003fdc06 	br	585c <__umoddi3+0x11c>
    58ec:	00bfffd4 	movui	r2,65535
    58f0:	12004a36 	bltu	r2,r8,5a1c <__umoddi3+0x2dc>
    58f4:	00803fc4 	movi	r2,255
    58f8:	12010d36 	bltu	r2,r8,5d30 <__umoddi3+0x5f0>
    58fc:	000b883a 	mov	r5,zero
    5900:	0005883a 	mov	r2,zero
    5904:	9884d83a 	srl	r2,r19,r2
    5908:	01000034 	movhi	r4,0
    590c:	2117fa04 	addi	r4,r4,24552
    5910:	01800804 	movi	r6,32
    5914:	1105883a 	add	r2,r2,r4
    5918:	10c00003 	ldbu	r3,0(r2)
    591c:	28c7883a 	add	r3,r5,r3
    5920:	30c7c83a 	sub	r3,r6,r3
    5924:	1800dc1e 	bne	r3,zero,5c98 <__umoddi3+0x558>
    5928:	002d883a 	mov	r22,zero
    592c:	982ed43a 	srli	r23,r19,16
    5930:	a809883a 	mov	r4,r21
    5934:	9cbfffcc 	andi	r18,r19,65535
    5938:	b80b883a 	mov	r5,r23
    593c:	0005edc0 	call	5edc <__udivsi3>
    5940:	100b883a 	mov	r5,r2
    5944:	9009883a 	mov	r4,r18
    5948:	000459c0 	call	459c <__mulsi3>
    594c:	a809883a 	mov	r4,r21
    5950:	b80b883a 	mov	r5,r23
    5954:	1023883a 	mov	r17,r2
    5958:	0005ee40 	call	5ee4 <__umodsi3>
    595c:	1004943a 	slli	r2,r2,16
    5960:	8006d43a 	srli	r3,r16,16
    5964:	10c4b03a 	or	r2,r2,r3
    5968:	1440032e 	bgeu	r2,r17,5978 <__umoddi3+0x238>
    596c:	14c5883a 	add	r2,r2,r19
    5970:	14c00136 	bltu	r2,r19,5978 <__umoddi3+0x238>
    5974:	14410236 	bltu	r2,r17,5d80 <__umoddi3+0x640>
    5978:	1463c83a 	sub	r17,r2,r17
    597c:	8809883a 	mov	r4,r17
    5980:	b80b883a 	mov	r5,r23
    5984:	0005edc0 	call	5edc <__udivsi3>
    5988:	9009883a 	mov	r4,r18
    598c:	100b883a 	mov	r5,r2
    5990:	000459c0 	call	459c <__mulsi3>
    5994:	8809883a 	mov	r4,r17
    5998:	b80b883a 	mov	r5,r23
    599c:	102b883a 	mov	r21,r2
    59a0:	0005ee40 	call	5ee4 <__umodsi3>
    59a4:	1004943a 	slli	r2,r2,16
    59a8:	80ffffcc 	andi	r3,r16,65535
    59ac:	10c4b03a 	or	r2,r2,r3
    59b0:	1540042e 	bgeu	r2,r21,59c4 <__umoddi3+0x284>
    59b4:	14c5883a 	add	r2,r2,r19
    59b8:	14c00236 	bltu	r2,r19,59c4 <__umoddi3+0x284>
    59bc:	1540012e 	bgeu	r2,r21,59c4 <__umoddi3+0x284>
    59c0:	14c5883a 	add	r2,r2,r19
    59c4:	1545c83a 	sub	r2,r2,r21
    59c8:	1584d83a 	srl	r2,r2,r22
    59cc:	0013883a 	mov	r9,zero
    59d0:	d8800415 	stw	r2,16(sp)
    59d4:	d8c00417 	ldw	r3,16(sp)
    59d8:	0005883a 	mov	r2,zero
    59dc:	d8800515 	stw	r2,20(sp)
    59e0:	1811883a 	mov	r8,r3
    59e4:	003f9d06 	br	585c <__umoddi3+0x11c>
    59e8:	00804034 	movhi	r2,256
    59ec:	10bfffc4 	addi	r2,r2,-1
    59f0:	14c0c636 	bltu	r2,r19,5d0c <__umoddi3+0x5cc>
    59f4:	01400404 	movi	r5,16
    59f8:	2805883a 	mov	r2,r5
    59fc:	003f6c06 	br	57b0 <__umoddi3+0x70>
    5a00:	01000044 	movi	r4,1
    5a04:	000b883a 	mov	r5,zero
    5a08:	0005edc0 	call	5edc <__udivsi3>
    5a0c:	1027883a 	mov	r19,r2
    5a10:	00bfffd4 	movui	r2,65535
    5a14:	14fff436 	bltu	r2,r19,59e8 <__umoddi3+0x2a8>
    5a18:	003f6106 	br	57a0 <__umoddi3+0x60>
    5a1c:	00804034 	movhi	r2,256
    5a20:	10bfffc4 	addi	r2,r2,-1
    5a24:	1200c536 	bltu	r2,r8,5d3c <__umoddi3+0x5fc>
    5a28:	01400404 	movi	r5,16
    5a2c:	2805883a 	mov	r2,r5
    5a30:	003fb406 	br	5904 <__umoddi3+0x1c4>
    5a34:	00804034 	movhi	r2,256
    5a38:	10bfffc4 	addi	r2,r2,-1
    5a3c:	11c0c236 	bltu	r2,r7,5d48 <__umoddi3+0x608>
    5a40:	01400404 	movi	r5,16
    5a44:	2805883a 	mov	r2,r5
    5a48:	003f9806 	br	58ac <__umoddi3+0x16c>
    5a4c:	84c9c83a 	sub	r4,r16,r19
    5a50:	8105803a 	cmpltu	r2,r16,r4
    5a54:	a987c83a 	sub	r3,r21,r6
    5a58:	18abc83a 	sub	r21,r3,r2
    5a5c:	2021883a 	mov	r16,r4
    5a60:	003f9d06 	br	58d8 <__umoddi3+0x198>
    5a64:	9ca6983a 	sll	r19,r19,r18
    5a68:	3485c83a 	sub	r2,r6,r18
    5a6c:	a8a2d83a 	srl	r17,r21,r2
    5a70:	982ed43a 	srli	r23,r19,16
    5a74:	ac86983a 	sll	r3,r21,r18
    5a78:	8084d83a 	srl	r2,r16,r2
    5a7c:	8809883a 	mov	r4,r17
    5a80:	b80b883a 	mov	r5,r23
    5a84:	18b8b03a 	or	fp,r3,r2
    5a88:	9d3fffcc 	andi	r20,r19,65535
    5a8c:	0005edc0 	call	5edc <__udivsi3>
    5a90:	100b883a 	mov	r5,r2
    5a94:	a009883a 	mov	r4,r20
    5a98:	000459c0 	call	459c <__mulsi3>
    5a9c:	8809883a 	mov	r4,r17
    5aa0:	b80b883a 	mov	r5,r23
    5aa4:	102b883a 	mov	r21,r2
    5aa8:	0005ee40 	call	5ee4 <__umodsi3>
    5aac:	1004943a 	slli	r2,r2,16
    5ab0:	e006d43a 	srli	r3,fp,16
    5ab4:	902d883a 	mov	r22,r18
    5ab8:	10c4b03a 	or	r2,r2,r3
    5abc:	1540022e 	bgeu	r2,r21,5ac8 <__umoddi3+0x388>
    5ac0:	14c5883a 	add	r2,r2,r19
    5ac4:	14c0ab2e 	bgeu	r2,r19,5d74 <__umoddi3+0x634>
    5ac8:	1563c83a 	sub	r17,r2,r21
    5acc:	8809883a 	mov	r4,r17
    5ad0:	b80b883a 	mov	r5,r23
    5ad4:	0005edc0 	call	5edc <__udivsi3>
    5ad8:	100b883a 	mov	r5,r2
    5adc:	a009883a 	mov	r4,r20
    5ae0:	000459c0 	call	459c <__mulsi3>
    5ae4:	8809883a 	mov	r4,r17
    5ae8:	b80b883a 	mov	r5,r23
    5aec:	102b883a 	mov	r21,r2
    5af0:	0005ee40 	call	5ee4 <__umodsi3>
    5af4:	1004943a 	slli	r2,r2,16
    5af8:	e0ffffcc 	andi	r3,fp,65535
    5afc:	10c4b03a 	or	r2,r2,r3
    5b00:	1540042e 	bgeu	r2,r21,5b14 <__umoddi3+0x3d4>
    5b04:	14c5883a 	add	r2,r2,r19
    5b08:	14c00236 	bltu	r2,r19,5b14 <__umoddi3+0x3d4>
    5b0c:	1540012e 	bgeu	r2,r21,5b14 <__umoddi3+0x3d4>
    5b10:	14c5883a 	add	r2,r2,r19
    5b14:	84a0983a 	sll	r16,r16,r18
    5b18:	156bc83a 	sub	r21,r2,r21
    5b1c:	003f3106 	br	57e4 <__umoddi3+0xa4>
    5b20:	3c8fc83a 	sub	r7,r7,r18
    5b24:	3486983a 	sll	r3,r6,r18
    5b28:	99c4d83a 	srl	r2,r19,r7
    5b2c:	a9e2d83a 	srl	r17,r21,r7
    5b30:	ac8c983a 	sll	r6,r21,r18
    5b34:	18acb03a 	or	r22,r3,r2
    5b38:	b02ed43a 	srli	r23,r22,16
    5b3c:	81c4d83a 	srl	r2,r16,r7
    5b40:	8809883a 	mov	r4,r17
    5b44:	b80b883a 	mov	r5,r23
    5b48:	308cb03a 	or	r6,r6,r2
    5b4c:	d9c00315 	stw	r7,12(sp)
    5b50:	d9800215 	stw	r6,8(sp)
    5b54:	b53fffcc 	andi	r20,r22,65535
    5b58:	0005edc0 	call	5edc <__udivsi3>
    5b5c:	100b883a 	mov	r5,r2
    5b60:	a009883a 	mov	r4,r20
    5b64:	1039883a 	mov	fp,r2
    5b68:	000459c0 	call	459c <__mulsi3>
    5b6c:	8809883a 	mov	r4,r17
    5b70:	b80b883a 	mov	r5,r23
    5b74:	102b883a 	mov	r21,r2
    5b78:	0005ee40 	call	5ee4 <__umodsi3>
    5b7c:	d9000217 	ldw	r4,8(sp)
    5b80:	1004943a 	slli	r2,r2,16
    5b84:	9ca6983a 	sll	r19,r19,r18
    5b88:	2006d43a 	srli	r3,r4,16
    5b8c:	84a0983a 	sll	r16,r16,r18
    5b90:	dcc00015 	stw	r19,0(sp)
    5b94:	10c4b03a 	or	r2,r2,r3
    5b98:	dc000115 	stw	r16,4(sp)
    5b9c:	1540032e 	bgeu	r2,r21,5bac <__umoddi3+0x46c>
    5ba0:	1585883a 	add	r2,r2,r22
    5ba4:	e73fffc4 	addi	fp,fp,-1
    5ba8:	15806e2e 	bgeu	r2,r22,5d64 <__umoddi3+0x624>
    5bac:	1563c83a 	sub	r17,r2,r21
    5bb0:	8809883a 	mov	r4,r17
    5bb4:	b80b883a 	mov	r5,r23
    5bb8:	0005edc0 	call	5edc <__udivsi3>
    5bbc:	100b883a 	mov	r5,r2
    5bc0:	a009883a 	mov	r4,r20
    5bc4:	1021883a 	mov	r16,r2
    5bc8:	000459c0 	call	459c <__mulsi3>
    5bcc:	b80b883a 	mov	r5,r23
    5bd0:	8809883a 	mov	r4,r17
    5bd4:	1029883a 	mov	r20,r2
    5bd8:	0005ee40 	call	5ee4 <__umodsi3>
    5bdc:	d9400217 	ldw	r5,8(sp)
    5be0:	1004943a 	slli	r2,r2,16
    5be4:	28ffffcc 	andi	r3,r5,65535
    5be8:	10c4b03a 	or	r2,r2,r3
    5bec:	1500032e 	bgeu	r2,r20,5bfc <__umoddi3+0x4bc>
    5bf0:	1585883a 	add	r2,r2,r22
    5bf4:	843fffc4 	addi	r16,r16,-1
    5bf8:	1580562e 	bgeu	r2,r22,5d54 <__umoddi3+0x614>
    5bfc:	d9800017 	ldw	r6,0(sp)
    5c00:	e022943a 	slli	r17,fp,16
    5c04:	302ed43a 	srli	r23,r6,16
    5c08:	8462b03a 	or	r17,r16,r17
    5c0c:	34ffffcc 	andi	r19,r6,65535
    5c10:	882ad43a 	srli	r21,r17,16
    5c14:	8c7fffcc 	andi	r17,r17,65535
    5c18:	8809883a 	mov	r4,r17
    5c1c:	980b883a 	mov	r5,r19
    5c20:	1521c83a 	sub	r16,r2,r20
    5c24:	000459c0 	call	459c <__mulsi3>
    5c28:	8809883a 	mov	r4,r17
    5c2c:	b80b883a 	mov	r5,r23
    5c30:	1029883a 	mov	r20,r2
    5c34:	000459c0 	call	459c <__mulsi3>
    5c38:	980b883a 	mov	r5,r19
    5c3c:	a809883a 	mov	r4,r21
    5c40:	1023883a 	mov	r17,r2
    5c44:	000459c0 	call	459c <__mulsi3>
    5c48:	a809883a 	mov	r4,r21
    5c4c:	b80b883a 	mov	r5,r23
    5c50:	1027883a 	mov	r19,r2
    5c54:	000459c0 	call	459c <__mulsi3>
    5c58:	100b883a 	mov	r5,r2
    5c5c:	a004d43a 	srli	r2,r20,16
    5c60:	8ce3883a 	add	r17,r17,r19
    5c64:	1449883a 	add	r4,r2,r17
    5c68:	24c0022e 	bgeu	r4,r19,5c74 <__umoddi3+0x534>
    5c6c:	00800074 	movhi	r2,1
    5c70:	288b883a 	add	r5,r5,r2
    5c74:	2004d43a 	srli	r2,r4,16
    5c78:	2008943a 	slli	r4,r4,16
    5c7c:	a0ffffcc 	andi	r3,r20,65535
    5c80:	288d883a 	add	r6,r5,r2
    5c84:	20c9883a 	add	r4,r4,r3
    5c88:	81800b36 	bltu	r16,r6,5cb8 <__umoddi3+0x578>
    5c8c:	81804026 	beq	r16,r6,5d90 <__umoddi3+0x650>
    5c90:	818dc83a 	sub	r6,r16,r6
    5c94:	00000f06 	br	5cd4 <__umoddi3+0x594>
    5c98:	30c5c83a 	sub	r2,r6,r3
    5c9c:	182d883a 	mov	r22,r3
    5ca0:	8084d83a 	srl	r2,r16,r2
    5ca4:	a8c6983a 	sll	r3,r21,r3
    5ca8:	9da6983a 	sll	r19,r19,r22
    5cac:	85a0983a 	sll	r16,r16,r22
    5cb0:	18aab03a 	or	r21,r3,r2
    5cb4:	003f1d06 	br	592c <__umoddi3+0x1ec>
    5cb8:	d8c00017 	ldw	r3,0(sp)
    5cbc:	20c5c83a 	sub	r2,r4,r3
    5cc0:	2089803a 	cmpltu	r4,r4,r2
    5cc4:	3587c83a 	sub	r3,r6,r22
    5cc8:	1907c83a 	sub	r3,r3,r4
    5ccc:	80cdc83a 	sub	r6,r16,r3
    5cd0:	1009883a 	mov	r4,r2
    5cd4:	d9400117 	ldw	r5,4(sp)
    5cd8:	2905c83a 	sub	r2,r5,r4
    5cdc:	2887803a 	cmpltu	r3,r5,r2
    5ce0:	30c7c83a 	sub	r3,r6,r3
    5ce4:	d9800317 	ldw	r6,12(sp)
    5ce8:	1484d83a 	srl	r2,r2,r18
    5cec:	1988983a 	sll	r4,r3,r6
    5cf0:	1c86d83a 	srl	r3,r3,r18
    5cf4:	2088b03a 	or	r4,r4,r2
    5cf8:	2011883a 	mov	r8,r4
    5cfc:	1813883a 	mov	r9,r3
    5d00:	d9000415 	stw	r4,16(sp)
    5d04:	d8c00515 	stw	r3,20(sp)
    5d08:	003ed406 	br	585c <__umoddi3+0x11c>
    5d0c:	01400604 	movi	r5,24
    5d10:	2805883a 	mov	r2,r5
    5d14:	003ea606 	br	57b0 <__umoddi3+0x70>
    5d18:	01400204 	movi	r5,8
    5d1c:	2805883a 	mov	r2,r5
    5d20:	003ea306 	br	57b0 <__umoddi3+0x70>
    5d24:	01400204 	movi	r5,8
    5d28:	2805883a 	mov	r2,r5
    5d2c:	003edf06 	br	58ac <__umoddi3+0x16c>
    5d30:	01400204 	movi	r5,8
    5d34:	2805883a 	mov	r2,r5
    5d38:	003ef206 	br	5904 <__umoddi3+0x1c4>
    5d3c:	01400604 	movi	r5,24
    5d40:	2805883a 	mov	r2,r5
    5d44:	003eef06 	br	5904 <__umoddi3+0x1c4>
    5d48:	01400604 	movi	r5,24
    5d4c:	2805883a 	mov	r2,r5
    5d50:	003ed606 	br	58ac <__umoddi3+0x16c>
    5d54:	153fa92e 	bgeu	r2,r20,5bfc <__umoddi3+0x4bc>
    5d58:	843fffc4 	addi	r16,r16,-1
    5d5c:	1585883a 	add	r2,r2,r22
    5d60:	003fa606 	br	5bfc <__umoddi3+0x4bc>
    5d64:	157f912e 	bgeu	r2,r21,5bac <__umoddi3+0x46c>
    5d68:	e73fffc4 	addi	fp,fp,-1
    5d6c:	1585883a 	add	r2,r2,r22
    5d70:	003f8e06 	br	5bac <__umoddi3+0x46c>
    5d74:	157f542e 	bgeu	r2,r21,5ac8 <__umoddi3+0x388>
    5d78:	14c5883a 	add	r2,r2,r19
    5d7c:	003f5206 	br	5ac8 <__umoddi3+0x388>
    5d80:	14c5883a 	add	r2,r2,r19
    5d84:	003efc06 	br	5978 <__umoddi3+0x238>
    5d88:	14c5883a 	add	r2,r2,r19
    5d8c:	003ea606 	br	5828 <__umoddi3+0xe8>
    5d90:	d8800117 	ldw	r2,4(sp)
    5d94:	113fc836 	bltu	r2,r4,5cb8 <__umoddi3+0x578>
    5d98:	000d883a 	mov	r6,zero
    5d9c:	003fcd06 	br	5cd4 <__umoddi3+0x594>

00005da0 <udivmodsi4>:
    5da0:	29001b2e 	bgeu	r5,r4,5e10 <udivmodsi4+0x70>
    5da4:	28001a16 	blt	r5,zero,5e10 <udivmodsi4+0x70>
    5da8:	00800044 	movi	r2,1
    5dac:	0007883a 	mov	r3,zero
    5db0:	01c007c4 	movi	r7,31
    5db4:	00000306 	br	5dc4 <udivmodsi4+0x24>
    5db8:	19c01326 	beq	r3,r7,5e08 <udivmodsi4+0x68>
    5dbc:	18c00044 	addi	r3,r3,1
    5dc0:	28000416 	blt	r5,zero,5dd4 <udivmodsi4+0x34>
    5dc4:	294b883a 	add	r5,r5,r5
    5dc8:	1085883a 	add	r2,r2,r2
    5dcc:	293ffa36 	bltu	r5,r4,5db8 <udivmodsi4+0x18>
    5dd0:	10000d26 	beq	r2,zero,5e08 <udivmodsi4+0x68>
    5dd4:	0007883a 	mov	r3,zero
    5dd8:	21400236 	bltu	r4,r5,5de4 <udivmodsi4+0x44>
    5ddc:	2149c83a 	sub	r4,r4,r5
    5de0:	1886b03a 	or	r3,r3,r2
    5de4:	1004d07a 	srli	r2,r2,1
    5de8:	280ad07a 	srli	r5,r5,1
    5dec:	103ffa1e 	bne	r2,zero,5dd8 <udivmodsi4+0x38>
    5df0:	30000226 	beq	r6,zero,5dfc <udivmodsi4+0x5c>
    5df4:	2005883a 	mov	r2,r4
    5df8:	f800283a 	ret
    5dfc:	1809883a 	mov	r4,r3
    5e00:	2005883a 	mov	r2,r4
    5e04:	f800283a 	ret
    5e08:	0007883a 	mov	r3,zero
    5e0c:	003ff806 	br	5df0 <udivmodsi4+0x50>
    5e10:	00800044 	movi	r2,1
    5e14:	0007883a 	mov	r3,zero
    5e18:	003fef06 	br	5dd8 <udivmodsi4+0x38>

00005e1c <__divsi3>:
    5e1c:	defffe04 	addi	sp,sp,-8
    5e20:	dc000015 	stw	r16,0(sp)
    5e24:	dfc00115 	stw	ra,4(sp)
    5e28:	0021883a 	mov	r16,zero
    5e2c:	20000c16 	blt	r4,zero,5e60 <__divsi3+0x44>
    5e30:	000d883a 	mov	r6,zero
    5e34:	28000e16 	blt	r5,zero,5e70 <__divsi3+0x54>
    5e38:	0005da00 	call	5da0 <udivmodsi4>
    5e3c:	1007883a 	mov	r3,r2
    5e40:	8005003a 	cmpeq	r2,r16,zero
    5e44:	1000011e 	bne	r2,zero,5e4c <__divsi3+0x30>
    5e48:	00c7c83a 	sub	r3,zero,r3
    5e4c:	1805883a 	mov	r2,r3
    5e50:	dfc00117 	ldw	ra,4(sp)
    5e54:	dc000017 	ldw	r16,0(sp)
    5e58:	dec00204 	addi	sp,sp,8
    5e5c:	f800283a 	ret
    5e60:	0109c83a 	sub	r4,zero,r4
    5e64:	04000044 	movi	r16,1
    5e68:	000d883a 	mov	r6,zero
    5e6c:	283ff20e 	bge	r5,zero,5e38 <__divsi3+0x1c>
    5e70:	014bc83a 	sub	r5,zero,r5
    5e74:	8021003a 	cmpeq	r16,r16,zero
    5e78:	003fef06 	br	5e38 <__divsi3+0x1c>

00005e7c <__modsi3>:
    5e7c:	deffff04 	addi	sp,sp,-4
    5e80:	dfc00015 	stw	ra,0(sp)
    5e84:	01800044 	movi	r6,1
    5e88:	2807883a 	mov	r3,r5
    5e8c:	20000416 	blt	r4,zero,5ea0 <__modsi3+0x24>
    5e90:	28000c16 	blt	r5,zero,5ec4 <__modsi3+0x48>
    5e94:	dfc00017 	ldw	ra,0(sp)
    5e98:	dec00104 	addi	sp,sp,4
    5e9c:	0005da01 	jmpi	5da0 <udivmodsi4>
    5ea0:	0109c83a 	sub	r4,zero,r4
    5ea4:	28000b16 	blt	r5,zero,5ed4 <__modsi3+0x58>
    5ea8:	180b883a 	mov	r5,r3
    5eac:	01800044 	movi	r6,1
    5eb0:	0005da00 	call	5da0 <udivmodsi4>
    5eb4:	0085c83a 	sub	r2,zero,r2
    5eb8:	dfc00017 	ldw	ra,0(sp)
    5ebc:	dec00104 	addi	sp,sp,4
    5ec0:	f800283a 	ret
    5ec4:	014bc83a 	sub	r5,zero,r5
    5ec8:	dfc00017 	ldw	ra,0(sp)
    5ecc:	dec00104 	addi	sp,sp,4
    5ed0:	0005da01 	jmpi	5da0 <udivmodsi4>
    5ed4:	0147c83a 	sub	r3,zero,r5
    5ed8:	003ff306 	br	5ea8 <__modsi3+0x2c>

00005edc <__udivsi3>:
    5edc:	000d883a 	mov	r6,zero
    5ee0:	0005da01 	jmpi	5da0 <udivmodsi4>

00005ee4 <__umodsi3>:
    5ee4:	01800044 	movi	r6,1
    5ee8:	0005da01 	jmpi	5da0 <udivmodsi4>

00005eec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    5eec:	defffd04 	addi	sp,sp,-12
    5ef0:	df000215 	stw	fp,8(sp)
    5ef4:	df000204 	addi	fp,sp,8
    5ef8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    5efc:	e0bfff17 	ldw	r2,-4(fp)
    5f00:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5f04:	e0bffe17 	ldw	r2,-8(fp)
    5f08:	1005003a 	cmpeq	r2,r2,zero
    5f0c:	1000021e 	bne	r2,zero,5f18 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    5f10:	002af070 	cmpltui	zero,zero,43969
    5f14:	00000106 	br	5f1c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    5f18:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    5f1c:	e037883a 	mov	sp,fp
    5f20:	df000017 	ldw	fp,0(sp)
    5f24:	dec00104 	addi	sp,sp,4
    5f28:	f800283a 	ret

00005f2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5f2c:	defffd04 	addi	sp,sp,-12
    5f30:	dfc00215 	stw	ra,8(sp)
    5f34:	df000115 	stw	fp,4(sp)
    5f38:	df000104 	addi	fp,sp,4
    5f3c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    5f40:	e13fff17 	ldw	r4,-4(fp)
    5f44:	0005eec0 	call	5eec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5f48:	003fff06 	br	5f48 <_exit+0x1c>
    5f4c:	0000558c 	andi	zero,zero,342
